<OptionsRegistry>
    <Options>
        <Option type="boolean">
            <BooleanAttributes key="automatic_tearing" value="true">
                <Description>
                    If enabled, then automatic tearing of equation systems is performed.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="check_inactive_contitionals" value="false">
                <Description>
                    If enabled, check for errors in inactive conditional components when compiling. 
                    When using check mode, this is always done.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="component_names_in_errors" value="true">
                <Description>
                    If enabled, the compiler will include the name of the component where the error 
                    was found, if applicable.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="convert_free_dependent_parameters_to_algebraics" value="true">
                <Description>
                    If enabled, then free dependent parameters are converted to algebraic variables.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="copy_source_files_to_fmu" value="false">
                <Description>
                    If enabled, the generated source files will be copied to the FMU.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="divide_by_vars_in_tearing" value="false">
                <Description>
                    If enabled, a less restrictive strategy is used for solving equations in the 
                    tearing algorithm. Specifically, division by parameters and variables is 
                    permitted, by default no such divisions are made during tearing.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="enable_block_function_extraction" value="false">
                <Description>
                    Looks for function calls in blocks. If a function call in a block doesn&apos;t 
                    depend on the block in question, it is extracted from the block.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="event_output_vars" value="false">
                <Description>
                    If enabled, output variables are added to model description for each generated 
                    state event indicator.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="external_constant_evaluation" value="5000">
                <Description>
                    Time limit (ms) when evaluating constant calls to external functions during 
                    compilation. 0 indicates no evaluation. -1 indicates no time limit.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="filter_warnings" value="">
                <Description>
                    A comma separated list of warning identifiers that should be omitted from the 
                    logs.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="generate_html_diagnostics" value="false">
                <Description>
                    If enabled, model diagnostics are generated in HTML format. This includes the 
                    flattened model, connection sets, alias sets and BLT form.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="generate_html_diagnostics_output_directory" value=".">
                <Description>
                    Path to directory where compiler output should be generated for the option 
                    &apos;generate_html_diagnostics&apos;. Default value is &apos;.&apos;. Directory 
                    is created if it doesn&apos;t exist. The html diagnostics is generated in a 
                    subdirectory of this directory.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="generate_mof_files" value="false">
                <Description>
                    If enabled, then flat model before and after transformations will be generated.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="generate_only_initial_system" value="false">
                <Description>
                    If enabled, then only the initial equation system will be generated.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="halt_on_warning" value="false">
                <Description>
                    If enabled, compilation warnings will cause compilation to abort.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="index_reduction" value="true">
                <Description>
                    If enabled, then index reduction is performed for high-index systems.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="init_nonlinear_solver" value="kinsol">
                <Description>
                    Decides which nonlinear equation solver to use in the initial system. 
                    Alternatives are &apos;kinsol or &apos;minpack&apos;.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="nonlinear_solver" value="kinsol">
                <Description>
                    Decides which nonlinear equation solver to use. Alternatives are &apos;kinsol or 
                    &apos;minpack&apos;.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="state_initial_equations" value="false">
                <Description>
                    If enabled, the compiler ignores initial equations in the model and adds 
                    parameters for controlling intitial values of states.Default is false.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="state_start_values_fixed" value="false">
                <Description>
                    If enabled, then initial equations are generated automatically for 
                    differentiated variables even though the fixed attribute is equal to fixed. 
                    Setting this option to true is, however, often practical in optimization 
                    problems.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="tearing_division_tolerance" value="1.0E-10">
                <Description>
                    The minimum allowed size for a divisor constant when performing tearing.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="time_events" value="true">
                <Description>
                    If enabled, operators are allowed to generate time events.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="allow_non_scalar_nested_blocks" value="true">
                <Description>
                    If disabled, an error is given if there are nested blocks which are non-scalar.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="automatic_add_initial_equations" value="true">
                <Description>
                    If enabled, then additional initial equations are added to the model based 
                    equation matching. Initial equations are added for states that are not matched 
                    to an equation.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="c_compiler" value="gcc">
                <Description>
                    The C compiler to use to compile generated C code.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="cc_extra_flags" value=":O1">
                <Description>
                    Optimization level for c-code compilation
                </Description>
            </StringAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="cc_extra_flags_applies_to" value="functions">
                <Description>
                    Parts of c-code to compile with extra compiler flags specified by 
                    ccompiler_extra_flags
                </Description>
            </StringAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="cc_split_element_limit" value="1000">
                <Description>
                    When generating code for large systems, the code is split into multiple 
                    functions and files for performance reasons. This option controls how many 
                    scalar elements can be evaluated by a function. Value less than 1 indicates no 
                    split.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="cc_split_function_limit" value="20">
                <Description>
                    When generating code for large systems, the code is split into multiple 
                    functions and files for performance reasons. This option controls how many 
                    functions can be generated in a file. Value less than 1 indicates no split.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="cc_split_function_limit_globals" value="200">
                <Description>
                    When generating code for large systems, the code is split into multiple 
                    functions and files for performance reasons. This option controls how many 
                    functions can be generated in a file for initialization of global variables. 
                    Value less than 1 indicates no split.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="common_subexp_elim" value="true">
                <Description>
                    If enabled, the compiler performs a global analysis on the equation system and 
                    extract identical function calls into common equations.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="diagnostics_limit" value="500">
                <Description>
                    This option specifies the equation system size at which the compiler will start 
                    to reduce model diagnostics. This option only affects diagnostic output that 
                    grows faster than linear with the number of equations.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="dynamic_states" value="true">
                <Description>
                    If enabled, dynamic states will be calculated and generated.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="dynamic_states_limit" value="10">
                <Description>
                    Limit for size of dynamic state sets. Value &lt; 0 indicates infinite. Value == 
                    0 indicates disabled.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="eliminate_alias_constants" value="true">
                <Description>
                    If enabled, then alias constants are eliminated from the model.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="eliminate_alias_parameters" value="true">
                <Description>
                    If enabled, then alias parameters are eliminated from the model.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="eliminate_alias_variables" value="true">
                <Description>
                    If enabled, then alias variables are eliminated from the model.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="eliminate_linear_equations" value="true">
                <Description>
                    If enabled, then equations with linear sub expressions are substituted and 
                    eliminated.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="enable_structural_diagnosis" value="true">
                <Description>
                    If enabled, structural error diagnosis based on matching of equations to 
                    variables is used.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="enable_variable_scaling" value="false">
                <Description>
                    If enabled, then the &apos;nominal&apos; attribute will be used to scale 
                    variables in the model.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="equation_sorting" value="true">
                <Description>
                    If enabled, then the equation system is separated into minimal blocks that can 
                    be solved sequentially.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="export_functions" value="false">
                <Description>
                    Export used Modelica functions to generated C code in a manner that is 
                    compatible with the external C interface in the Modelica Language Specification.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="export_functions_vba" value="false">
                <Description>
                    Create VBA-compatible wrappers for exported functions. Requires the option 
                    export_functions.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="expose_temp_vars_in_fmu" value="false">
                <Description>
                    If enabled, then all temporary variables are exposed in the FMU XML and 
                    accessible as ordinary variables
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="external_constant_evaluation_max_proc" value="10">
                <Description>
                    The maximum number of processes kept alive for evaluation of external functions 
                    during compilation. This speeds up evaluation of functions using external 
                    objects during compilation.If less than 1, no processes will be kept alive, i.e. 
                    this feature is turned off.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="function_incidence_computation" value="none">
                <Description>
                    Controls how matching algorithm computes incidences for function call equations. 
                    Possible values: &apos;none&apos;, &apos;all&apos;. With &apos;none&apos; all 
                    outputs are assumed to depend on all inputs. With &apos;all&apos; the compiler 
                    analyses the function to determine dependencies.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="generate_runtime_option_parameters" value="true">
                <Description>
                    If enabled, generate parameters for runtime options. Should always be true for 
                    normal compilation.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="homotopy_type" value="actual">
                <Description>
                    Decides how homotopy expressions are interpreted during compilation. Can be set 
                    to either &apos;simplified&apos; or &apos;actual&apos; which will compile the 
                    model using only the simplified or actual expressions of the homotopy() 
                    operator.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="ignore_within" value="false">
                <Description>
                    If enabled, ignore within clauses both when reading input files and when 
                    error-checking.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="inline_functions" value="trivial">
                <Description>
                    Controlles what function calls are inlined. &apos;none&apos; - no function calls 
                    are inlined. &apos;trivial&apos; - inline function calls that will not increase 
                    the number of variables in the system. &apos;all&apos; - inline all function 
                    calls that are possible.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="string">
            <StringAttributes key="local_iteration_in_tearing" value="off">
                <Description>
                    This option controls whether equations can be solved local in tearing. Possible 
                    options are: &apos;off&apos;, local iterations are not used (default). 
                    &apos;annotation&apos;, only equations that are annotated are candidates. 
                    &apos;all&apos;, all equations are candidates.
                </Description>
            </StringAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="max_n_proc" value="4">
                <Description>
                    The maximum number of processes used during c-code compilation.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="normalize_minimum_time_problems" value="true">
                <Description>
                    If enabled, then minimum time optimal control problems encoded in Optimica are 
                    converted to fixed interval problems by scaling of the derivative variables. Has 
                    no effect for Modelica models.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="propagate_derivatives" value="true">
                <Description>
                    If enabled, the compiler will try to replace ordinary variable references with 
                    derivative references. This is done by first finding equations on the form x = 
                    der(y). If possible, uses of x will then be replaced with der(x).
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="variability_propagation" value="true">
                <Description>
                    If enabled, the compiler performs a global analysis on the equation system and 
                    reduces variables to constants and parameters where applicable.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="variability_propagation_algorithms" value="false">
                <Description>
                    If enabled, the compiler includes modelica algorithms in variability 
                    propagation.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="variability_propagation_external" value="true">
                <Description>
                    If enabled, the compiler allows external constant evaluation during variability 
                    propagation.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="variability_propagation_initial" value="true">
                <Description>
                    If enabled, the compiler performs a global analysis on the initial equation 
                    system and reduces initial parameters to constants and parameters where 
                    applicable.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="variability_propagation_initial_partial" value="false">
                <Description>
                    If enabled, the compiler allows partial constant evaluation of function calls in 
                    initial equations during variability propagation.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="write_iteration_variables_to_file" value="false">
                <Description>
                    If enabled, two text files containing one iteration variable name per row is 
                    written to disk. The files contains the iteration variables for the DAE and the 
                    DAE initialization system respectively. The files are output to the resource 
                    directory of the FMU.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="write_tearing_pairs_to_file" value="false">
                <Description>
                    If enabled, two text files containing tearing pairs is written to disk. The 
                    files contains the tearing pairs for the DAE and the DAE initialization system 
                    respectively. The files are output to the working directory.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="algorithms_as_functions" value="false">
                <Description>
                    If enabled, convert algorithm sections to function calls.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="disable_smooth_events" value="false">
                <Description>
                    If enabled, no events will be generated for smooth operator if order equals to 
                    zero.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="event_indicator_scaling" value="false">
                <Description>
                    If enabled, event indicators will be scaled with nominal heuristics
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="generate_event_switches" value="true">
                <Description>
                    If enabled, event generating expressions generates switches in the c-code. 
                    Setting this option to false can give unexpected results.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="generate_sparse_block_jacobian_threshold" value="100">
                <Description>
                    Threshold for when a sparse Jacobian should be generated. If the number of torn 
                    variables is less than the threshold a dense Jacobian is generated.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="unroll_functions" value="false">
                <Description>
                    Internal option used for casadi transfer. If true, loops in functions are 
                    unrolled. All sizes in functions are assumed to be known. Will cause compilation 
                    errors if not.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="cs_rel_tol" value="1.0E-6">
                <Description>
                    Tolerance for the adaptive solvers in the Co-Simulation case.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="cs_solver" value="0">
                <Description>
                    Specifies the internal solver used in Co-Simulation. 0 - CVode, 1 - Euler.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="cs_step_size" value="0.001">
                <Description>
                    Step-size for the fixed-step solvers in the Co-Simulation case.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="enforce_bounds" value="true">
                <Description>
                    If enabled, min / max bounds on variables are enforced in the equation blocks.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="iteration_variable_scaling" value="1">
                <Description>
                    Scaling mode for the iteration variables in the equation block solvers: 0 - no 
                    scaling, 1 - scaling based on nominals, 2 - utilize heuristic to guess nominal 
                    based on min, max, start, etc.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="log_level" value="3">
                <Description>
                    Log level for the runtime: 0 - none, 1 - fatal error, 2 - error, 3 - warning, 4 
                    - info, 5 - verbose, 6 - debug.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="nle_active_bounds_mode" value="0">
                <Description>
                    Mode for how to handle active bounds: 0 - project Newton step at active bounds, 
                    1 - use projected steepest descent direction.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="nle_jacobian_calculation_mode" value="0">
                <Description>
                    Mode for how to calculate the Jacobian: 0 - onesided differences, 1 - central 
                    differences, 2 - central differences at bound, 3 - central differences at bound 
                    and 0, 4 - central differences in second Newton solve, 5 - central differences 
                    at bound in second Newton solve, 6 - central differences at bound and 0 in 
                    second Newton solve, 7 - central differences at small residual, 8 - calculate 
                    Jacobian externally, 9 - Jacobian compresssion.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_jacobian_finite_difference_delta" value="1.490116119384766E-8">
                <Description>
                    Delta to use when calculating finite difference Jacobians.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="nle_jacobian_update_mode" value="2">
                <Description>
                    Mode for how to update the Jacobian: 0 - full Jacobian, 1 - Broyden update, 2 - 
                    Reuse Jacobian.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_default_tol" value="1.0E-10">
                <Description>
                    Default tolerance for the equation block solver.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="nle_solver_exit_criterion" value="3">
                <Description>
                    Exit criterion mode: 0 - step length and residual based, 1 - only step length 
                    based, 2 - only residual based, 3 - hybrid.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_max_residual_scaling_factor" value="1.0E10">
                <Description>
                    Maximal scaling factor used by automatic and hybrid residual scaling algorithm.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_min_residual_scaling_factor" value="1.0E-10">
                <Description>
                    Minimal scaling factor used by automatic and hybrid residual scaling algorithm.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="rescale_after_singular_jac" value="true">
                <Description>
                    If enabled, scaling will be updated after a singular jacobian was detected (only 
                    active if automatic scaling is used).
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="rescale_each_step" value="false">
                <Description>
                    If enabled, scaling will be updated at every step (only active if automatic 
                    scaling is used).
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="residual_equation_scaling" value="1">
                <Description>
                    Equations scaling mode in equation block solvers: 0 - no scaling, 1 - automatic 
                    scaling, 2 - manual scaling, 3 - hybrid, 4 - aggressive automatic scaling, 5 - 
                    automatic rescaling at full Jacobian update
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="runtime_log_to_file" value="false">
                <Description>
                    If enabled, log messages from the runtime are written directly to a file, 
                    besides passing it through the FMU interface. The log file name is generated 
                    based on the FMU name.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="use_Brent_in_1d" value="true">
                <Description>
                    If enabled, Brent search will be used to improve accuracy in solution of 1D 
                    non-linear equations.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="block_solver_profiling" value="false">
                <Description>
                    If enabled, methods involved in solving an equation block will be timed.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="events_default_tol" value="1.0E-10">
                <Description>
                    Default tolerance for the event iterations.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="events_tol_factor" value="1.0E-4">
                <Description>
                    Tolerance safety factor for the event indicators. Used when external solver 
                    specifies relative tolerance.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="nle_brent_ignore_error" value="false">
                <Description>
                    If enabled, the Brent solver will ignore convergence failures.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="nle_solver_check_jac_cond" value="false">
                <Description>
                    If enabled, the equation block solver computes and log the jacobian condition 
                    number.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="nle_solver_max_iter" value="100">
                <Description>
                    Maximum number of iterations for the equation block solver.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="nle_solver_max_iter_no_jacobian" value="10">
                <Description>
                    Maximum number of iterations without jacobian update. Value 1 means an update in 
                    every iteration.
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_min_tol" value="1.0E-12">
                <Description>
                    Minimum tolerance for the equation block solver. Note that, e.g. default Kinsol 
                    tolerance is machine precision pwr 1/3, i.e. 1e-6.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_regularization_tolerance" value="-1.0">
                <Description>
                    Tolerance for deciding when regularization should be activated (i.e. when 
                    condition number &gt; reg tol).
                </Description>
            </RealAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_step_limit_factor" value="10.0">
                <Description>
                    Factor limiting the step-size taken by the nonlinear block solver.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="nle_solver_tol_factor" value="1.0E-4">
                <Description>
                    Tolerance safety factor for the equation block solver. Used when external solver 
                    specifies relative tolerance.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="nle_solver_use_last_integrator_step" value="true">
                <Description>
                    If enabled, the initial guess for the iteration variables will be set to the 
                    iteration variables from the last integrator step.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="nle_solver_use_nominals_as_fallback" value="true">
                <Description>
                    If enabled, the nominal values will be used as initial guess to the solver if 
                    initialization failed.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="real">
            <RealAttributes key="time_events_default_tol" value="2.220446049250313E-14">
                <Description>
                    Default tolerance for the time event iterations.
                </Description>
            </RealAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="use_jacobian_equilibration" value="false">
                <Description>
                    If enabled, jacobian equilibration will be utilized in the equation block 
                    solvers to improve linear solver accuracy.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="boolean">
            <BooleanAttributes key="use_newton_for_brent" value="true">
                <Description>
                    If enabled, a few Newton steps are computed to get a better initial guess for 
                    Brent.
                </Description>
            </BooleanAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="block_solver_experimental_mode" value="0">
                <Description>
                    Activates experimental features of equation block solvers
                </Description>
            </IntegerAttributes>
        </Option>
        <Option type="integer">
            <IntegerAttributes key="cs_experimental_mode" value="0">
                <Description>
                    Activates experimental features of CS ode solvers
                </Description>
            </IntegerAttributes>
        </Option>
    </Options>
</OptionsRegistry>
