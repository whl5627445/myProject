// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: router.proto

package grpcPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	FmuSimulation(ctx context.Context, in *FmuSimulationRequest, opts ...grpc.CallOption) (*FmuSimulationReply, error)
	GetProcessStatus(ctx context.Context, in *GetProcessStatusRequest, opts ...grpc.CallOption) (*GetProcessStatusReply, error)
	GetAllProcessNumber(ctx context.Context, in *GetAllProcessNumberRequest, opts ...grpc.CallOption) (*GetAllProcessNumberReply, error)
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultReply, error)
	ProcessOperation(ctx context.Context, in *ProcessOperationRequest, opts ...grpc.CallOption) (*ProcessOperationReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) FmuSimulation(ctx context.Context, in *FmuSimulationRequest, opts ...grpc.CallOption) (*FmuSimulationReply, error) {
	out := new(FmuSimulationReply)
	err := c.cc.Invoke(ctx, "/Greeter/FmuSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetProcessStatus(ctx context.Context, in *GetProcessStatusRequest, opts ...grpc.CallOption) (*GetProcessStatusReply, error) {
	out := new(GetProcessStatusReply)
	err := c.cc.Invoke(ctx, "/Greeter/GetProcessStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetAllProcessNumber(ctx context.Context, in *GetAllProcessNumberRequest, opts ...grpc.CallOption) (*GetAllProcessNumberReply, error) {
	out := new(GetAllProcessNumberReply)
	err := c.cc.Invoke(ctx, "/Greeter/GetAllProcessNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultReply, error) {
	out := new(GetResultReply)
	err := c.cc.Invoke(ctx, "/Greeter/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ProcessOperation(ctx context.Context, in *ProcessOperationRequest, opts ...grpc.CallOption) (*ProcessOperationReply, error) {
	out := new(ProcessOperationReply)
	err := c.cc.Invoke(ctx, "/Greeter/ProcessOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	FmuSimulation(context.Context, *FmuSimulationRequest) (*FmuSimulationReply, error)
	GetProcessStatus(context.Context, *GetProcessStatusRequest) (*GetProcessStatusReply, error)
	GetAllProcessNumber(context.Context, *GetAllProcessNumberRequest) (*GetAllProcessNumberReply, error)
	GetResult(context.Context, *GetResultRequest) (*GetResultReply, error)
	ProcessOperation(context.Context, *ProcessOperationRequest) (*ProcessOperationReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) FmuSimulation(context.Context, *FmuSimulationRequest) (*FmuSimulationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FmuSimulation not implemented")
}
func (UnimplementedGreeterServer) GetProcessStatus(context.Context, *GetProcessStatusRequest) (*GetProcessStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessStatus not implemented")
}
func (UnimplementedGreeterServer) GetAllProcessNumber(context.Context, *GetAllProcessNumberRequest) (*GetAllProcessNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProcessNumber not implemented")
}
func (UnimplementedGreeterServer) GetResult(context.Context, *GetResultRequest) (*GetResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedGreeterServer) ProcessOperation(context.Context, *ProcessOperationRequest) (*ProcessOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOperation not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_FmuSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FmuSimulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).FmuSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/FmuSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).FmuSimulation(ctx, req.(*FmuSimulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetProcessStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetProcessStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/GetProcessStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetProcessStatus(ctx, req.(*GetProcessStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetAllProcessNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProcessNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetAllProcessNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/GetAllProcessNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetAllProcessNumber(ctx, req.(*GetAllProcessNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ProcessOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ProcessOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/ProcessOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ProcessOperation(ctx, req.(*ProcessOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FmuSimulation",
			Handler:    _Greeter_FmuSimulation_Handler,
		},
		{
			MethodName: "GetProcessStatus",
			Handler:    _Greeter_GetProcessStatus_Handler,
		},
		{
			MethodName: "GetAllProcessNumber",
			Handler:    _Greeter_GetAllProcessNumber_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Greeter_GetResult_Handler,
		},
		{
			MethodName: "ProcessOperation",
			Handler:    _Greeter_ProcessOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router.proto",
}
