// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: taskInformationCenter.proto

package TaskInformationCenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskInformation_GetTaskInformation_FullMethodName                = "/taskInformationCenter.TaskInformation/GetTaskInformation"
	TaskInformation_GetTaskInformationList_FullMethodName            = "/taskInformationCenter.TaskInformation/GetTaskInformationList"
	TaskInformation_GetTaskInformationStatusList_FullMethodName      = "/taskInformationCenter.TaskInformation/GetTaskInformationStatusList"
	TaskInformation_GetNodeTaskInformation_FullMethodName            = "/taskInformationCenter.TaskInformation/GetNodeTaskInformation"
	TaskInformation_GetNodeStatusTaskInformation_FullMethodName      = "/taskInformationCenter.TaskInformation/GetNodeStatusTaskInformation"
	TaskInformation_GetNodeUndoneTaskInformation_FullMethodName      = "/taskInformationCenter.TaskInformation/GetNodeUndoneTaskInformation"
	TaskInformation_GetUserTaskInformation_FullMethodName            = "/taskInformationCenter.TaskInformation/GetUserTaskInformation"
	TaskInformation_GetDifferentTaskStatusInformation_FullMethodName = "/taskInformationCenter.TaskInformation/GetDifferentTaskStatusInformation"
	TaskInformation_UpdateTaskInformation_FullMethodName             = "/taskInformationCenter.TaskInformation/UpdateTaskInformation"
	TaskInformation_InsertTaskInformation_FullMethodName             = "/taskInformationCenter.TaskInformation/InsertTaskInformation"
	TaskInformation_GetTaskInformationLog_FullMethodName             = "/taskInformationCenter.TaskInformation/GetTaskInformationLog"
	TaskInformation_GetTaskInformationStatus_FullMethodName          = "/taskInformationCenter.TaskInformation/GetTaskInformationStatus"
	TaskInformation_GetPackageFinishedTaskList_FullMethodName        = "/taskInformationCenter.TaskInformation/GetPackageFinishedTaskList"
	TaskInformation_GetPackageFinishedTaskCount_FullMethodName       = "/taskInformationCenter.TaskInformation/GetPackageFinishedTaskCount"
)

// TaskInformationClient is the client API for TaskInformation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskInformationClient interface {
	GetTaskInformation(ctx context.Context, in *GetTaskInformationRequest, opts ...grpc.CallOption) (*GetTaskInformationResponse, error)
	GetTaskInformationList(ctx context.Context, in *GetTaskInformationListRequest, opts ...grpc.CallOption) (*GetTaskInformationListResponse, error)
	GetTaskInformationStatusList(ctx context.Context, in *GetTaskInformationListRequest, opts ...grpc.CallOption) (*GetTaskInformationStatusListResponse, error)
	GetNodeTaskInformation(ctx context.Context, in *GetNodeTaskInformationRequest, opts ...grpc.CallOption) (*GetNodeTaskInformationResponse, error)
	GetNodeStatusTaskInformation(ctx context.Context, in *GetNodeTaskInformationRequest, opts ...grpc.CallOption) (*GetNodeTaskInformationResponse, error)
	GetNodeUndoneTaskInformation(ctx context.Context, in *GetNodeTaskInformationRequest, opts ...grpc.CallOption) (*GetNodeTaskInformationResponse, error)
	GetUserTaskInformation(ctx context.Context, in *GetUserTaskInformationRequest, opts ...grpc.CallOption) (*GetUserTaskInformationResponse, error)
	GetDifferentTaskStatusInformation(ctx context.Context, in *GetDifferentTaskStatusInformationRequest, opts ...grpc.CallOption) (*GetDifferentTaskStatusInformationResponse, error)
	UpdateTaskInformation(ctx context.Context, in *TaskInformationRequest, opts ...grpc.CallOption) (*UpdateTaskInformationResponse, error)
	InsertTaskInformation(ctx context.Context, in *TaskInformationRequest, opts ...grpc.CallOption) (*InsertTaskInformationResponse, error)
	GetTaskInformationLog(ctx context.Context, in *GetTaskInformationRequest, opts ...grpc.CallOption) (*GetTaskInformationLogResponse, error)
	GetTaskInformationStatus(ctx context.Context, in *GetTaskInformationRequest, opts ...grpc.CallOption) (*GetTaskInformationStatusResponse, error)
	GetPackageFinishedTaskList(ctx context.Context, in *GetPackageFinishedTaskListRequest, opts ...grpc.CallOption) (*GetPackageFinishedTaskListResponse, error)
	GetPackageFinishedTaskCount(ctx context.Context, in *GetPackageFinishedTaskCountRequest, opts ...grpc.CallOption) (*GetPackageFinishedTaskCountResponse, error)
}

type taskInformationClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskInformationClient(cc grpc.ClientConnInterface) TaskInformationClient {
	return &taskInformationClient{cc}
}

func (c *taskInformationClient) GetTaskInformation(ctx context.Context, in *GetTaskInformationRequest, opts ...grpc.CallOption) (*GetTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetTaskInformationList(ctx context.Context, in *GetTaskInformationListRequest, opts ...grpc.CallOption) (*GetTaskInformationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskInformationListResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetTaskInformationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetTaskInformationStatusList(ctx context.Context, in *GetTaskInformationListRequest, opts ...grpc.CallOption) (*GetTaskInformationStatusListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskInformationStatusListResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetTaskInformationStatusList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetNodeTaskInformation(ctx context.Context, in *GetNodeTaskInformationRequest, opts ...grpc.CallOption) (*GetNodeTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetNodeTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetNodeStatusTaskInformation(ctx context.Context, in *GetNodeTaskInformationRequest, opts ...grpc.CallOption) (*GetNodeTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetNodeStatusTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetNodeUndoneTaskInformation(ctx context.Context, in *GetNodeTaskInformationRequest, opts ...grpc.CallOption) (*GetNodeTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetNodeUndoneTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetUserTaskInformation(ctx context.Context, in *GetUserTaskInformationRequest, opts ...grpc.CallOption) (*GetUserTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetUserTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetDifferentTaskStatusInformation(ctx context.Context, in *GetDifferentTaskStatusInformationRequest, opts ...grpc.CallOption) (*GetDifferentTaskStatusInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDifferentTaskStatusInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetDifferentTaskStatusInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) UpdateTaskInformation(ctx context.Context, in *TaskInformationRequest, opts ...grpc.CallOption) (*UpdateTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_UpdateTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) InsertTaskInformation(ctx context.Context, in *TaskInformationRequest, opts ...grpc.CallOption) (*InsertTaskInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertTaskInformationResponse)
	err := c.cc.Invoke(ctx, TaskInformation_InsertTaskInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetTaskInformationLog(ctx context.Context, in *GetTaskInformationRequest, opts ...grpc.CallOption) (*GetTaskInformationLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskInformationLogResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetTaskInformationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetTaskInformationStatus(ctx context.Context, in *GetTaskInformationRequest, opts ...grpc.CallOption) (*GetTaskInformationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskInformationStatusResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetTaskInformationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetPackageFinishedTaskList(ctx context.Context, in *GetPackageFinishedTaskListRequest, opts ...grpc.CallOption) (*GetPackageFinishedTaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageFinishedTaskListResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetPackageFinishedTaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInformationClient) GetPackageFinishedTaskCount(ctx context.Context, in *GetPackageFinishedTaskCountRequest, opts ...grpc.CallOption) (*GetPackageFinishedTaskCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageFinishedTaskCountResponse)
	err := c.cc.Invoke(ctx, TaskInformation_GetPackageFinishedTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskInformationServer is the server API for TaskInformation service.
// All implementations must embed UnimplementedTaskInformationServer
// for forward compatibility.
type TaskInformationServer interface {
	GetTaskInformation(context.Context, *GetTaskInformationRequest) (*GetTaskInformationResponse, error)
	GetTaskInformationList(context.Context, *GetTaskInformationListRequest) (*GetTaskInformationListResponse, error)
	GetTaskInformationStatusList(context.Context, *GetTaskInformationListRequest) (*GetTaskInformationStatusListResponse, error)
	GetNodeTaskInformation(context.Context, *GetNodeTaskInformationRequest) (*GetNodeTaskInformationResponse, error)
	GetNodeStatusTaskInformation(context.Context, *GetNodeTaskInformationRequest) (*GetNodeTaskInformationResponse, error)
	GetNodeUndoneTaskInformation(context.Context, *GetNodeTaskInformationRequest) (*GetNodeTaskInformationResponse, error)
	GetUserTaskInformation(context.Context, *GetUserTaskInformationRequest) (*GetUserTaskInformationResponse, error)
	GetDifferentTaskStatusInformation(context.Context, *GetDifferentTaskStatusInformationRequest) (*GetDifferentTaskStatusInformationResponse, error)
	UpdateTaskInformation(context.Context, *TaskInformationRequest) (*UpdateTaskInformationResponse, error)
	InsertTaskInformation(context.Context, *TaskInformationRequest) (*InsertTaskInformationResponse, error)
	GetTaskInformationLog(context.Context, *GetTaskInformationRequest) (*GetTaskInformationLogResponse, error)
	GetTaskInformationStatus(context.Context, *GetTaskInformationRequest) (*GetTaskInformationStatusResponse, error)
	GetPackageFinishedTaskList(context.Context, *GetPackageFinishedTaskListRequest) (*GetPackageFinishedTaskListResponse, error)
	GetPackageFinishedTaskCount(context.Context, *GetPackageFinishedTaskCountRequest) (*GetPackageFinishedTaskCountResponse, error)
	mustEmbedUnimplementedTaskInformationServer()
}

// UnimplementedTaskInformationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskInformationServer struct{}

func (UnimplementedTaskInformationServer) GetTaskInformation(context.Context, *GetTaskInformationRequest) (*GetTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) GetTaskInformationList(context.Context, *GetTaskInformationListRequest) (*GetTaskInformationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInformationList not implemented")
}
func (UnimplementedTaskInformationServer) GetTaskInformationStatusList(context.Context, *GetTaskInformationListRequest) (*GetTaskInformationStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInformationStatusList not implemented")
}
func (UnimplementedTaskInformationServer) GetNodeTaskInformation(context.Context, *GetNodeTaskInformationRequest) (*GetNodeTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) GetNodeStatusTaskInformation(context.Context, *GetNodeTaskInformationRequest) (*GetNodeTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatusTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) GetNodeUndoneTaskInformation(context.Context, *GetNodeTaskInformationRequest) (*GetNodeTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeUndoneTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) GetUserTaskInformation(context.Context, *GetUserTaskInformationRequest) (*GetUserTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) GetDifferentTaskStatusInformation(context.Context, *GetDifferentTaskStatusInformationRequest) (*GetDifferentTaskStatusInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDifferentTaskStatusInformation not implemented")
}
func (UnimplementedTaskInformationServer) UpdateTaskInformation(context.Context, *TaskInformationRequest) (*UpdateTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) InsertTaskInformation(context.Context, *TaskInformationRequest) (*InsertTaskInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTaskInformation not implemented")
}
func (UnimplementedTaskInformationServer) GetTaskInformationLog(context.Context, *GetTaskInformationRequest) (*GetTaskInformationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInformationLog not implemented")
}
func (UnimplementedTaskInformationServer) GetTaskInformationStatus(context.Context, *GetTaskInformationRequest) (*GetTaskInformationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInformationStatus not implemented")
}
func (UnimplementedTaskInformationServer) GetPackageFinishedTaskList(context.Context, *GetPackageFinishedTaskListRequest) (*GetPackageFinishedTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageFinishedTaskList not implemented")
}
func (UnimplementedTaskInformationServer) GetPackageFinishedTaskCount(context.Context, *GetPackageFinishedTaskCountRequest) (*GetPackageFinishedTaskCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageFinishedTaskCount not implemented")
}
func (UnimplementedTaskInformationServer) mustEmbedUnimplementedTaskInformationServer() {}
func (UnimplementedTaskInformationServer) testEmbeddedByValue()                         {}

// UnsafeTaskInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskInformationServer will
// result in compilation errors.
type UnsafeTaskInformationServer interface {
	mustEmbedUnimplementedTaskInformationServer()
}

func RegisterTaskInformationServer(s grpc.ServiceRegistrar, srv TaskInformationServer) {
	// If the following call pancis, it indicates UnimplementedTaskInformationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskInformation_ServiceDesc, srv)
}

func _TaskInformation_GetTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetTaskInformation(ctx, req.(*GetTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetTaskInformationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInformationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetTaskInformationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetTaskInformationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetTaskInformationList(ctx, req.(*GetTaskInformationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetTaskInformationStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInformationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetTaskInformationStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetTaskInformationStatusList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetTaskInformationStatusList(ctx, req.(*GetTaskInformationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetNodeTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetNodeTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetNodeTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetNodeTaskInformation(ctx, req.(*GetNodeTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetNodeStatusTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetNodeStatusTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetNodeStatusTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetNodeStatusTaskInformation(ctx, req.(*GetNodeTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetNodeUndoneTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetNodeUndoneTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetNodeUndoneTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetNodeUndoneTaskInformation(ctx, req.(*GetNodeTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetUserTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetUserTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetUserTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetUserTaskInformation(ctx, req.(*GetUserTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetDifferentTaskStatusInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDifferentTaskStatusInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetDifferentTaskStatusInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetDifferentTaskStatusInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetDifferentTaskStatusInformation(ctx, req.(*GetDifferentTaskStatusInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_UpdateTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).UpdateTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_UpdateTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).UpdateTaskInformation(ctx, req.(*TaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_InsertTaskInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).InsertTaskInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_InsertTaskInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).InsertTaskInformation(ctx, req.(*TaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetTaskInformationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetTaskInformationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetTaskInformationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetTaskInformationLog(ctx, req.(*GetTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetTaskInformationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetTaskInformationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetTaskInformationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetTaskInformationStatus(ctx, req.(*GetTaskInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetPackageFinishedTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageFinishedTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetPackageFinishedTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetPackageFinishedTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetPackageFinishedTaskList(ctx, req.(*GetPackageFinishedTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInformation_GetPackageFinishedTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageFinishedTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInformationServer).GetPackageFinishedTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInformation_GetPackageFinishedTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInformationServer).GetPackageFinishedTaskCount(ctx, req.(*GetPackageFinishedTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskInformation_ServiceDesc is the grpc.ServiceDesc for TaskInformation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskInformation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskInformationCenter.TaskInformation",
	HandlerType: (*TaskInformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskInformation",
			Handler:    _TaskInformation_GetTaskInformation_Handler,
		},
		{
			MethodName: "GetTaskInformationList",
			Handler:    _TaskInformation_GetTaskInformationList_Handler,
		},
		{
			MethodName: "GetTaskInformationStatusList",
			Handler:    _TaskInformation_GetTaskInformationStatusList_Handler,
		},
		{
			MethodName: "GetNodeTaskInformation",
			Handler:    _TaskInformation_GetNodeTaskInformation_Handler,
		},
		{
			MethodName: "GetNodeStatusTaskInformation",
			Handler:    _TaskInformation_GetNodeStatusTaskInformation_Handler,
		},
		{
			MethodName: "GetNodeUndoneTaskInformation",
			Handler:    _TaskInformation_GetNodeUndoneTaskInformation_Handler,
		},
		{
			MethodName: "GetUserTaskInformation",
			Handler:    _TaskInformation_GetUserTaskInformation_Handler,
		},
		{
			MethodName: "GetDifferentTaskStatusInformation",
			Handler:    _TaskInformation_GetDifferentTaskStatusInformation_Handler,
		},
		{
			MethodName: "UpdateTaskInformation",
			Handler:    _TaskInformation_UpdateTaskInformation_Handler,
		},
		{
			MethodName: "InsertTaskInformation",
			Handler:    _TaskInformation_InsertTaskInformation_Handler,
		},
		{
			MethodName: "GetTaskInformationLog",
			Handler:    _TaskInformation_GetTaskInformationLog_Handler,
		},
		{
			MethodName: "GetTaskInformationStatus",
			Handler:    _TaskInformation_GetTaskInformationStatus_Handler,
		},
		{
			MethodName: "GetPackageFinishedTaskList",
			Handler:    _TaskInformation_GetPackageFinishedTaskList_Handler,
		},
		{
			MethodName: "GetPackageFinishedTaskCount",
			Handler:    _TaskInformation_GetPackageFinishedTaskCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskInformationCenter.proto",
}
