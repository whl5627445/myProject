// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: taskInformationCenter.proto

package TaskInformationCenter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Variable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputObjList []float64              `protobuf:"fixed64,1,rep,packed,name=outputObjList,proto3" json:"outputObjList,omitempty"` // 输出对象列表，已废弃，保留是为了兼容，请使用outputValueList和outputNameList
	NameList      []string               `protobuf:"bytes,2,rep,name=nameList,proto3" json:"nameList,omitempty"`                    // 输出的名称列表，支持多个值，当valueList存储的是散点值，nameList存储的是对应的名称
	ValueList     []float32              `protobuf:"fixed32,3,rep,packed,name=valueList,proto3" json:"valueList,omitempty"`         // 输出的值列表， 支持多个值，也就是连续输出
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                            // 输出对象列表，单个值名称
	Value         float32                `protobuf:"fixed32,5,opt,name=value,proto3" json:"value,omitempty"`                        // 输出对象列表，单个值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Variable) Reset() {
	*x = Variable{}
	mi := &file_taskInformationCenter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{0}
}

func (x *Variable) GetOutputObjList() []float64 {
	if x != nil {
		return x.OutputObjList
	}
	return nil
}

func (x *Variable) GetNameList() []string {
	if x != nil {
		return x.NameList
	}
	return nil
}

func (x *Variable) GetValueList() []float32 {
	if x != nil {
		return x.ValueList
	}
	return nil
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variable) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Library struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //模型库名
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` //模型库版本
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`       //模型库路径
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Library) Reset() {
	*x = Library{}
	mi := &file_taskInformationCenter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{1}
}

func (x *Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Library) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Library) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type LogMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`      // 日志提交时间戳
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`         // 日志提交内容
	Incost        float32                `protobuf:"fixed32,3,opt,name=incost,proto3" json:"incost,omitempty"` // 耗时（ssp）
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`   // 状态（ssp）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMap) Reset() {
	*x = LogMap{}
	mi := &file_taskInformationCenter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMap) ProtoMessage() {}

func (x *LogMap) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMap.ProtoReflect.Descriptor instead.
func (*LogMap) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{2}
}

func (x *LogMap) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogMap) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogMap) GetIncost() float32 {
	if x != nil {
		return x.Incost
	}
	return 0
}

func (x *LogMap) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ParamObj struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`           // 参数名
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`       // 参数值，如果是文件，value是文件id
	IsFile        bool                   `protobuf:"varint,4,opt,name=isFile,proto3" json:"isFile,omitempty"`    // 是否是文件, 已废弃，保留是为了兼容，请使用type，type为file时表示文件，
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`         // 参数类型
	Mark          string                 `protobuf:"bytes,6,opt,name=mark,proto3" json:"mark,omitempty"`         // 参数标记，用作特殊用途，例如标记优化约束条件
	Min           float32                `protobuf:"fixed32,7,opt,name=min,proto3" json:"min,omitempty"`         // 参数最小值， 表示参数的取值范围
	Max           float32                `protobuf:"fixed32,8,opt,name=max,proto3" json:"max,omitempty"`         // 参数最大值， 表示参数的取值范围
	Weights       float32                `protobuf:"fixed32,9,opt,name=weights,proto3" json:"weights,omitempty"` // 参数权重系数，用于优化
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParamObj) Reset() {
	*x = ParamObj{}
	mi := &file_taskInformationCenter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParamObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamObj) ProtoMessage() {}

func (x *ParamObj) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamObj.ProtoReflect.Descriptor instead.
func (*ParamObj) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{3}
}

func (x *ParamObj) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ParamObj) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ParamObj) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *ParamObj) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ParamObj) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *ParamObj) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ParamObj) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ParamObj) GetWeights() float32 {
	if x != nil {
		return x.Weights
	}
	return 0
}

type CalculateNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`     // 节点唯一识别名称
	NodeName      string                 `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"` // 节点名称
	Ip            string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`             // 计算节点ip地址
	Port          int64                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`        // 计算节点的port
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateNode) Reset() {
	*x = CalculateNode{}
	mi := &file_taskInformationCenter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateNode) ProtoMessage() {}

func (x *CalculateNode) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateNode.ProtoReflect.Descriptor instead.
func (*CalculateNode) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{4}
}

func (x *CalculateNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *CalculateNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *CalculateNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CalculateNode) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DataMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` // 时间戳
	Data          string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`  // 内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataMap) Reset() {
	*x = DataMap{}
	mi := &file_taskInformationCenter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMap) ProtoMessage() {}

func (x *DataMap) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMap.ProtoReflect.Descriptor instead.
func (*DataMap) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{5}
}

func (x *DataMap) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DataMap) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetNodeTaskInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` // 节点唯一识别id
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // 需要查询的任务状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeTaskInformationRequest) Reset() {
	*x = GetNodeTaskInformationRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeTaskInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeTaskInformationRequest) ProtoMessage() {}

func (x *GetNodeTaskInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeTaskInformationRequest.ProtoReflect.Descriptor instead.
func (*GetNodeTaskInformationRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{6}
}

func (x *GetNodeTaskInformationRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetNodeTaskInformationRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetTaskInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // 任务唯一识别id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInformationRequest) Reset() {
	*x = GetTaskInformationRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationRequest) ProtoMessage() {}

func (x *GetTaskInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationRequest.ProtoReflect.Descriptor instead.
func (*GetTaskInformationRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{7}
}

func (x *GetTaskInformationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetTaskInformationListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []string               `protobuf:"bytes,1,rep,name=uuid,proto3" json:"uuid,omitempty"` // 任务唯一识别id列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInformationListRequest) Reset() {
	*x = GetTaskInformationListRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationListRequest) ProtoMessage() {}

func (x *GetTaskInformationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationListRequest.ProtoReflect.Descriptor instead.
func (*GetTaskInformationListRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{8}
}

func (x *GetTaskInformationListRequest) GetUuid() []string {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type GetUserTaskInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"` // 任务提交人
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTaskInformationRequest) Reset() {
	*x = GetUserTaskInformationRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTaskInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskInformationRequest) ProtoMessage() {}

func (x *GetUserTaskInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskInformationRequest.ProtoReflect.Descriptor instead.
func (*GetUserTaskInformationRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserTaskInformationRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type GetDifferentTaskStatusInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // 任务状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDifferentTaskStatusInformationRequest) Reset() {
	*x = GetDifferentTaskStatusInformationRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDifferentTaskStatusInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDifferentTaskStatusInformationRequest) ProtoMessage() {}

func (x *GetDifferentTaskStatusInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDifferentTaskStatusInformationRequest.ProtoReflect.Descriptor instead.
func (*GetDifferentTaskStatusInformationRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{10}
}

func (x *GetDifferentTaskStatusInformationRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TaskInformationRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uuid              string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                                // 任务唯一识别id
	UserName          string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`                                                                                        // 任务提交人
	Operate           string                 `protobuf:"bytes,3,opt,name=operate,proto3" json:"operate,omitempty"`                                                                                          // 提交的任务操作类型
	Application       string                 `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`                                                                                  // 应用层模块名称
	Status            string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                                                                            // 任务状态
	Cpu               []*DataMap             `protobuf:"bytes,6,rep,name=cpu,proto3" json:"cpu,omitempty"`                                                                                                  // 任务使用的CPU占比
	Memory            []*DataMap             `protobuf:"bytes,7,rep,name=memory,proto3" json:"memory,omitempty"`                                                                                            // 任务使用的内存大小
	HardDisk          string                 `protobuf:"bytes,8,opt,name=hardDisk,proto3" json:"hardDisk,omitempty"`                                                                                        // 任务使用的磁盘大小
	TaskType          string                 `protobuf:"bytes,9,opt,name=taskType,proto3" json:"taskType,omitempty"`                                                                                        // 任务类型
	ProgressRate      string                 `protobuf:"bytes,10,opt,name=progressRate,proto3" json:"progressRate,omitempty"`                                                                               // 任务进度
	Log               []*LogMap              `protobuf:"bytes,11,rep,name=log,proto3" json:"log,omitempty"`                                                                                                 // 任务日志
	CreateTime        int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                  // 任务创建的时间
	SimulateStartTime int64                  `protobuf:"varint,13,opt,name=simulateStartTime,proto3" json:"simulateStartTime,omitempty"`                                                                    // 任务开始的时间
	SimulateStopTime  int64                  `protobuf:"varint,14,opt,name=simulateStopTime,proto3" json:"simulateStopTime,omitempty"`                                                                      // 任务结束的时间
	Params            []*ParamObj            `protobuf:"bytes,15,rep,name=params,proto3" json:"params,omitempty"`                                                                                           // 输入
	ExportVariables   []string               `protobuf:"bytes,16,rep,name=exportVariables,proto3" json:"exportVariables,omitempty"`                                                                         // 输出变量的名称列表
	OutputInterval    float32                `protobuf:"fixed32,17,opt,name=outputInterval,proto3" json:"outputInterval,omitempty"`                                                                         // 仿真间隔
	Token             string                 `protobuf:"bytes,18,opt,name=token,proto3" json:"token,omitempty"`                                                                                             // 下载fmu文件的token
	FileId            string                 `protobuf:"bytes,19,opt,name=fileId,proto3" json:"fileId,omitempty"`                                                                                           // 资源文件id
	SimulateResult    map[string]*Variable   `protobuf:"bytes,20,rep,name=simulateResult,proto3" json:"simulateResult,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 结果map
	NodeInformation   *CalculateNode         `protobuf:"bytes,21,opt,name=nodeInformation,proto3" json:"nodeInformation,omitempty"`                                                                         // 运行任务的计算节点信息
	StartTime         float32                `protobuf:"fixed32,22,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                   // 仿真开始时间
	StopTime          float32                `protobuf:"fixed32,23,opt,name=stopTime,proto3" json:"stopTime,omitempty"`                                                                                     // 仿真结束时间
	ResultAddress     string                 `protobuf:"bytes,24,opt,name=resultAddress,proto3" json:"resultAddress,omitempty"`                                                                             // 结果地址
	Tolerance         string                 `protobuf:"bytes,25,opt,name=tolerance,proto3" json:"tolerance,omitempty"`                                                                                     // 仿真容差
	NumberOfIntervals string                 `protobuf:"bytes,26,opt,name=numberOfIntervals,proto3" json:"numberOfIntervals,omitempty"`                                                                     // 仿真步数
	Method            string                 `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`                                                                                           // 仿真方法
	LibraryList       []*Library             `protobuf:"bytes,28,rep,name=libraryList,proto3" json:"libraryList,omitempty"`                                                                                 // 依赖模型库列表
	ModelName         string                 `protobuf:"bytes,29,opt,name=modelName,proto3" json:"modelName,omitempty"`                                                                                     // 仿真模型名
	PackageId         string                 `protobuf:"bytes,30,opt,name=packageId,proto3" json:"packageId,omitempty"`                                                                                     // 仿真模型所在包级别唯一识别id
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskInformationRequest) Reset() {
	*x = TaskInformationRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInformationRequest) ProtoMessage() {}

func (x *TaskInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInformationRequest.ProtoReflect.Descriptor instead.
func (*TaskInformationRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{11}
}

func (x *TaskInformationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskInformationRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TaskInformationRequest) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *TaskInformationRequest) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *TaskInformationRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskInformationRequest) GetCpu() []*DataMap {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *TaskInformationRequest) GetMemory() []*DataMap {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *TaskInformationRequest) GetHardDisk() string {
	if x != nil {
		return x.HardDisk
	}
	return ""
}

func (x *TaskInformationRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskInformationRequest) GetProgressRate() string {
	if x != nil {
		return x.ProgressRate
	}
	return ""
}

func (x *TaskInformationRequest) GetLog() []*LogMap {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *TaskInformationRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TaskInformationRequest) GetSimulateStartTime() int64 {
	if x != nil {
		return x.SimulateStartTime
	}
	return 0
}

func (x *TaskInformationRequest) GetSimulateStopTime() int64 {
	if x != nil {
		return x.SimulateStopTime
	}
	return 0
}

func (x *TaskInformationRequest) GetParams() []*ParamObj {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TaskInformationRequest) GetExportVariables() []string {
	if x != nil {
		return x.ExportVariables
	}
	return nil
}

func (x *TaskInformationRequest) GetOutputInterval() float32 {
	if x != nil {
		return x.OutputInterval
	}
	return 0
}

func (x *TaskInformationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TaskInformationRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *TaskInformationRequest) GetSimulateResult() map[string]*Variable {
	if x != nil {
		return x.SimulateResult
	}
	return nil
}

func (x *TaskInformationRequest) GetNodeInformation() *CalculateNode {
	if x != nil {
		return x.NodeInformation
	}
	return nil
}

func (x *TaskInformationRequest) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TaskInformationRequest) GetStopTime() float32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *TaskInformationRequest) GetResultAddress() string {
	if x != nil {
		return x.ResultAddress
	}
	return ""
}

func (x *TaskInformationRequest) GetTolerance() string {
	if x != nil {
		return x.Tolerance
	}
	return ""
}

func (x *TaskInformationRequest) GetNumberOfIntervals() string {
	if x != nil {
		return x.NumberOfIntervals
	}
	return ""
}

func (x *TaskInformationRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TaskInformationRequest) GetLibraryList() []*Library {
	if x != nil {
		return x.LibraryList
	}
	return nil
}

func (x *TaskInformationRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TaskInformationRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type GetTaskInformationResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uuid              string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                                // 任务唯一识别id
	UserName          string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`                                                                                        // 任务提交人
	Operate           string                 `protobuf:"bytes,3,opt,name=operate,proto3" json:"operate,omitempty"`                                                                                          // 提交的任务操作类型
	Application       string                 `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`                                                                                  // 应用层模块名称
	Status            string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                                                                            // 任务状态
	Cpu               []*DataMap             `protobuf:"bytes,6,rep,name=cpu,proto3" json:"cpu,omitempty"`                                                                                                  // 任务使用的CPU占比
	Memory            []*DataMap             `protobuf:"bytes,7,rep,name=memory,proto3" json:"memory,omitempty"`                                                                                            // 任务使用的内存大小
	HardDisk          string                 `protobuf:"bytes,8,opt,name=hardDisk,proto3" json:"hardDisk,omitempty"`                                                                                        // 任务使用的磁盘大小
	TaskType          string                 `protobuf:"bytes,9,opt,name=taskType,proto3" json:"taskType,omitempty"`                                                                                        // 任务类型
	ProgressRate      string                 `protobuf:"bytes,10,opt,name=progressRate,proto3" json:"progressRate,omitempty"`                                                                               // 任务进度
	Log               []*LogMap              `protobuf:"bytes,11,rep,name=log,proto3" json:"log,omitempty"`                                                                                                 // 任务日志
	CreateTime        int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                  // 任务创建的时间
	SimulateStartTime int64                  `protobuf:"varint,13,opt,name=simulateStartTime,proto3" json:"simulateStartTime,omitempty"`                                                                    // 任务开始的时间
	SimulateStopTime  int64                  `protobuf:"varint,14,opt,name=simulateStopTime,proto3" json:"simulateStopTime,omitempty"`                                                                      // 任务结束的时间
	Params            []*ParamObj            `protobuf:"bytes,15,rep,name=params,proto3" json:"params,omitempty"`                                                                                           // 输入
	ExportVariables   []string               `protobuf:"bytes,16,rep,name=exportVariables,proto3" json:"exportVariables,omitempty"`                                                                         // 输出变量的名称列表
	OutputInterval    float32                `protobuf:"fixed32,17,opt,name=outputInterval,proto3" json:"outputInterval,omitempty"`                                                                         // 仿真间隔
	Token             string                 `protobuf:"bytes,18,opt,name=token,proto3" json:"token,omitempty"`                                                                                             // 下载fmu文件的token
	FileId            string                 `protobuf:"bytes,19,opt,name=fileId,proto3" json:"fileId,omitempty"`                                                                                           // 资源文件id
	SimulateResult    map[string]*Variable   `protobuf:"bytes,20,rep,name=simulateResult,proto3" json:"simulateResult,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 结果map
	NodeInformation   *CalculateNode         `protobuf:"bytes,21,opt,name=nodeInformation,proto3" json:"nodeInformation,omitempty"`                                                                         // 运行任务的计算节点信息
	StartTime         float32                `protobuf:"fixed32,22,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                   // 仿真开始时间
	StopTime          float32                `protobuf:"fixed32,23,opt,name=stopTime,proto3" json:"stopTime,omitempty"`                                                                                     // 仿真结束时间
	ResultAddress     string                 `protobuf:"bytes,24,opt,name=resultAddress,proto3" json:"resultAddress,omitempty"`                                                                             // 结果地址
	Tolerance         string                 `protobuf:"bytes,25,opt,name=tolerance,proto3" json:"tolerance,omitempty"`                                                                                     // 仿真容差
	NumberOfIntervals string                 `protobuf:"bytes,26,opt,name=numberOfIntervals,proto3" json:"numberOfIntervals,omitempty"`                                                                     // 仿真步数
	Method            string                 `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`                                                                                           // 仿真方法
	LibraryList       []*Library             `protobuf:"bytes,28,rep,name=libraryList,proto3" json:"libraryList,omitempty"`                                                                                 // 依赖模型库列表
	ModelName         string                 `protobuf:"bytes,29,opt,name=modelName,proto3" json:"modelName,omitempty"`                                                                                     // 仿真模型名
	PackageId         string                 `protobuf:"bytes,30,opt,name=packageId,proto3" json:"packageId,omitempty"`                                                                                     // 仿真模型所在包级别唯一识别id
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetTaskInformationResponse) Reset() {
	*x = GetTaskInformationResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationResponse) ProtoMessage() {}

func (x *GetTaskInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationResponse.ProtoReflect.Descriptor instead.
func (*GetTaskInformationResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{12}
}

func (x *GetTaskInformationResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetTaskInformationResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetTaskInformationResponse) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *GetTaskInformationResponse) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *GetTaskInformationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetTaskInformationResponse) GetCpu() []*DataMap {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *GetTaskInformationResponse) GetMemory() []*DataMap {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *GetTaskInformationResponse) GetHardDisk() string {
	if x != nil {
		return x.HardDisk
	}
	return ""
}

func (x *GetTaskInformationResponse) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *GetTaskInformationResponse) GetProgressRate() string {
	if x != nil {
		return x.ProgressRate
	}
	return ""
}

func (x *GetTaskInformationResponse) GetLog() []*LogMap {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *GetTaskInformationResponse) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetTaskInformationResponse) GetSimulateStartTime() int64 {
	if x != nil {
		return x.SimulateStartTime
	}
	return 0
}

func (x *GetTaskInformationResponse) GetSimulateStopTime() int64 {
	if x != nil {
		return x.SimulateStopTime
	}
	return 0
}

func (x *GetTaskInformationResponse) GetParams() []*ParamObj {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GetTaskInformationResponse) GetExportVariables() []string {
	if x != nil {
		return x.ExportVariables
	}
	return nil
}

func (x *GetTaskInformationResponse) GetOutputInterval() float32 {
	if x != nil {
		return x.OutputInterval
	}
	return 0
}

func (x *GetTaskInformationResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetTaskInformationResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetTaskInformationResponse) GetSimulateResult() map[string]*Variable {
	if x != nil {
		return x.SimulateResult
	}
	return nil
}

func (x *GetTaskInformationResponse) GetNodeInformation() *CalculateNode {
	if x != nil {
		return x.NodeInformation
	}
	return nil
}

func (x *GetTaskInformationResponse) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTaskInformationResponse) GetStopTime() float32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *GetTaskInformationResponse) GetResultAddress() string {
	if x != nil {
		return x.ResultAddress
	}
	return ""
}

func (x *GetTaskInformationResponse) GetTolerance() string {
	if x != nil {
		return x.Tolerance
	}
	return ""
}

func (x *GetTaskInformationResponse) GetNumberOfIntervals() string {
	if x != nil {
		return x.NumberOfIntervals
	}
	return ""
}

func (x *GetTaskInformationResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *GetTaskInformationResponse) GetLibraryList() []*Library {
	if x != nil {
		return x.LibraryList
	}
	return nil
}

func (x *GetTaskInformationResponse) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *GetTaskInformationResponse) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type UpdateTaskInformationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`       // 任务唯一识别id
	Result        bool                   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`  // 执行是否成功
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // 返回的消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskInformationResponse) Reset() {
	*x = UpdateTaskInformationResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskInformationResponse) ProtoMessage() {}

func (x *UpdateTaskInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskInformationResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskInformationResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateTaskInformationResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateTaskInformationResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateTaskInformationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InsertTaskInformationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`       // 任务唯一识别id
	Result        bool                   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`  // 执行是否成功
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // 返回的消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertTaskInformationResponse) Reset() {
	*x = InsertTaskInformationResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertTaskInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertTaskInformationResponse) ProtoMessage() {}

func (x *InsertTaskInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertTaskInformationResponse.ProtoReflect.Descriptor instead.
func (*InsertTaskInformationResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{14}
}

func (x *InsertTaskInformationResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *InsertTaskInformationResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *InsertTaskInformationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskInformationRecord struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uuid              string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                                // 任务唯一识别id
	UserName          string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`                                                                                        // 任务提交人
	Operate           string                 `protobuf:"bytes,3,opt,name=operate,proto3" json:"operate,omitempty"`                                                                                          // 提交的任务操作类型
	Application       string                 `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`                                                                                  // 应用层模块名称
	Status            string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                                                                            // 任务状态
	Cpu               []*DataMap             `protobuf:"bytes,6,rep,name=cpu,proto3" json:"cpu,omitempty"`                                                                                                  // 任务使用的CPU占比
	Memory            []*DataMap             `protobuf:"bytes,7,rep,name=memory,proto3" json:"memory,omitempty"`                                                                                            // 任务使用的内存大小
	HardDisk          string                 `protobuf:"bytes,8,opt,name=hardDisk,proto3" json:"hardDisk,omitempty"`                                                                                        // 任务使用的磁盘大小
	TaskType          string                 `protobuf:"bytes,9,opt,name=taskType,proto3" json:"taskType,omitempty"`                                                                                        // 任务类型
	ProgressRate      string                 `protobuf:"bytes,10,opt,name=progressRate,proto3" json:"progressRate,omitempty"`                                                                               // 任务进度
	Log               []*LogMap              `protobuf:"bytes,11,rep,name=log,proto3" json:"log,omitempty"`                                                                                                 // 任务日志
	CreateTime        int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                  // 任务创建的时间
	SimulateStartTime int64                  `protobuf:"varint,13,opt,name=simulateStartTime,proto3" json:"simulateStartTime,omitempty"`                                                                    // 任务开始的时间
	SimulateStopTime  int64                  `protobuf:"varint,14,opt,name=simulateStopTime,proto3" json:"simulateStopTime,omitempty"`                                                                      // 任务结束的时间
	Params            []*ParamObj            `protobuf:"bytes,15,rep,name=params,proto3" json:"params,omitempty"`                                                                                           // 输入
	ExportVariables   []string               `protobuf:"bytes,16,rep,name=exportVariables,proto3" json:"exportVariables,omitempty"`                                                                         // 输出变量的名称列表
	OutputInterval    float32                `protobuf:"fixed32,17,opt,name=outputInterval,proto3" json:"outputInterval,omitempty"`                                                                         // 仿真间隔
	Token             string                 `protobuf:"bytes,18,opt,name=token,proto3" json:"token,omitempty"`                                                                                             // 下载fmu文件的token
	FileId            string                 `protobuf:"bytes,19,opt,name=fileId,proto3" json:"fileId,omitempty"`                                                                                           // 资源文件id
	SimulateResult    map[string]*Variable   `protobuf:"bytes,20,rep,name=simulateResult,proto3" json:"simulateResult,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 结果map
	NodeInformation   *CalculateNode         `protobuf:"bytes,21,opt,name=nodeInformation,proto3" json:"nodeInformation,omitempty"`                                                                         // 运行任务的计算节点信息
	StartTime         float32                `protobuf:"fixed32,22,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                   // 仿真开始时间
	StopTime          float32                `protobuf:"fixed32,23,opt,name=stopTime,proto3" json:"stopTime,omitempty"`                                                                                     // 仿真结束时间
	ResultAddress     string                 `protobuf:"bytes,24,opt,name=resultAddress,proto3" json:"resultAddress,omitempty"`                                                                             // 结果地址
	Tolerance         string                 `protobuf:"bytes,25,opt,name=tolerance,proto3" json:"tolerance,omitempty"`                                                                                     // 仿真容差
	NumberOfIntervals string                 `protobuf:"bytes,26,opt,name=numberOfIntervals,proto3" json:"numberOfIntervals,omitempty"`                                                                     // 仿真步数
	Method            string                 `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`                                                                                           // 仿真方法
	LibraryList       []*Library             `protobuf:"bytes,28,rep,name=libraryList,proto3" json:"libraryList,omitempty"`                                                                                 // 依赖模型库列表
	ModelName         string                 `protobuf:"bytes,29,opt,name=modelName,proto3" json:"modelName,omitempty"`                                                                                     // 仿真模型名
	PackageId         string                 `protobuf:"bytes,30,opt,name=packageId,proto3" json:"packageId,omitempty"`                                                                                     // 仿真模型所在包级别唯一识别id
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskInformationRecord) Reset() {
	*x = TaskInformationRecord{}
	mi := &file_taskInformationCenter_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskInformationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInformationRecord) ProtoMessage() {}

func (x *TaskInformationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInformationRecord.ProtoReflect.Descriptor instead.
func (*TaskInformationRecord) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{15}
}

func (x *TaskInformationRecord) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskInformationRecord) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TaskInformationRecord) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *TaskInformationRecord) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *TaskInformationRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskInformationRecord) GetCpu() []*DataMap {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *TaskInformationRecord) GetMemory() []*DataMap {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *TaskInformationRecord) GetHardDisk() string {
	if x != nil {
		return x.HardDisk
	}
	return ""
}

func (x *TaskInformationRecord) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskInformationRecord) GetProgressRate() string {
	if x != nil {
		return x.ProgressRate
	}
	return ""
}

func (x *TaskInformationRecord) GetLog() []*LogMap {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *TaskInformationRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TaskInformationRecord) GetSimulateStartTime() int64 {
	if x != nil {
		return x.SimulateStartTime
	}
	return 0
}

func (x *TaskInformationRecord) GetSimulateStopTime() int64 {
	if x != nil {
		return x.SimulateStopTime
	}
	return 0
}

func (x *TaskInformationRecord) GetParams() []*ParamObj {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TaskInformationRecord) GetExportVariables() []string {
	if x != nil {
		return x.ExportVariables
	}
	return nil
}

func (x *TaskInformationRecord) GetOutputInterval() float32 {
	if x != nil {
		return x.OutputInterval
	}
	return 0
}

func (x *TaskInformationRecord) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TaskInformationRecord) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *TaskInformationRecord) GetSimulateResult() map[string]*Variable {
	if x != nil {
		return x.SimulateResult
	}
	return nil
}

func (x *TaskInformationRecord) GetNodeInformation() *CalculateNode {
	if x != nil {
		return x.NodeInformation
	}
	return nil
}

func (x *TaskInformationRecord) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TaskInformationRecord) GetStopTime() float32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *TaskInformationRecord) GetResultAddress() string {
	if x != nil {
		return x.ResultAddress
	}
	return ""
}

func (x *TaskInformationRecord) GetTolerance() string {
	if x != nil {
		return x.Tolerance
	}
	return ""
}

func (x *TaskInformationRecord) GetNumberOfIntervals() string {
	if x != nil {
		return x.NumberOfIntervals
	}
	return ""
}

func (x *TaskInformationRecord) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TaskInformationRecord) GetLibraryList() []*Library {
	if x != nil {
		return x.LibraryList
	}
	return nil
}

func (x *TaskInformationRecord) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TaskInformationRecord) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type GetUserTaskInformationResponse struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	InformationList []*TaskInformationRecord `protobuf:"bytes,1,rep,name=information_list,json=informationList,proto3" json:"information_list,omitempty"` // 返回消息列表
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetUserTaskInformationResponse) Reset() {
	*x = GetUserTaskInformationResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTaskInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskInformationResponse) ProtoMessage() {}

func (x *GetUserTaskInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskInformationResponse.ProtoReflect.Descriptor instead.
func (*GetUserTaskInformationResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserTaskInformationResponse) GetInformationList() []*TaskInformationRecord {
	if x != nil {
		return x.InformationList
	}
	return nil
}

type GetDifferentTaskStatusInformationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UuidList      []string               `protobuf:"bytes,1,rep,name=uuidList,proto3" json:"uuidList,omitempty"` // 返回消息列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDifferentTaskStatusInformationResponse) Reset() {
	*x = GetDifferentTaskStatusInformationResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDifferentTaskStatusInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDifferentTaskStatusInformationResponse) ProtoMessage() {}

func (x *GetDifferentTaskStatusInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDifferentTaskStatusInformationResponse.ProtoReflect.Descriptor instead.
func (*GetDifferentTaskStatusInformationResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{17}
}

func (x *GetDifferentTaskStatusInformationResponse) GetUuidList() []string {
	if x != nil {
		return x.UuidList
	}
	return nil
}

type GetNodeTaskInformationResponse struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	InformationList []*TaskInformationRecord `protobuf:"bytes,1,rep,name=information_list,json=informationList,proto3" json:"information_list,omitempty"` // 返回消息列表
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetNodeTaskInformationResponse) Reset() {
	*x = GetNodeTaskInformationResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeTaskInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeTaskInformationResponse) ProtoMessage() {}

func (x *GetNodeTaskInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeTaskInformationResponse.ProtoReflect.Descriptor instead.
func (*GetNodeTaskInformationResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{18}
}

func (x *GetNodeTaskInformationResponse) GetInformationList() []*TaskInformationRecord {
	if x != nil {
		return x.InformationList
	}
	return nil
}

type GetTaskInformationListResponse struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	InformationList []*TaskInformationRecord `protobuf:"bytes,1,rep,name=information_list,json=informationList,proto3" json:"information_list,omitempty"` // 返回消息列表
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTaskInformationListResponse) Reset() {
	*x = GetTaskInformationListResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationListResponse) ProtoMessage() {}

func (x *GetTaskInformationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationListResponse.ProtoReflect.Descriptor instead.
func (*GetTaskInformationListResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{19}
}

func (x *GetTaskInformationListResponse) GetInformationList() []*TaskInformationRecord {
	if x != nil {
		return x.InformationList
	}
	return nil
}

type RecordStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`     // 返回任务记录的状态
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // 返回任务记录的状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordStatus) Reset() {
	*x = RecordStatus{}
	mi := &file_taskInformationCenter_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStatus) ProtoMessage() {}

func (x *RecordStatus) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStatus.ProtoReflect.Descriptor instead.
func (*RecordStatus) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{20}
}

func (x *RecordStatus) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecordStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetTaskInformationStatusListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordStatus  []*RecordStatus        `protobuf:"bytes,1,rep,name=recordStatus,proto3" json:"recordStatus,omitempty"` // 返回任务记录的状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInformationStatusListResponse) Reset() {
	*x = GetTaskInformationStatusListResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationStatusListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationStatusListResponse) ProtoMessage() {}

func (x *GetTaskInformationStatusListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationStatusListResponse.ProtoReflect.Descriptor instead.
func (*GetTaskInformationStatusListResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{21}
}

func (x *GetTaskInformationStatusListResponse) GetRecordStatus() []*RecordStatus {
	if x != nil {
		return x.RecordStatus
	}
	return nil
}

type GetTaskInformationLogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogList       []*LogMap              `protobuf:"bytes,1,rep,name=logList,proto3" json:"logList,omitempty"` // 返回任务记录的日志列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInformationLogResponse) Reset() {
	*x = GetTaskInformationLogResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationLogResponse) ProtoMessage() {}

func (x *GetTaskInformationLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationLogResponse.ProtoReflect.Descriptor instead.
func (*GetTaskInformationLogResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{22}
}

func (x *GetTaskInformationLogResponse) GetLogList() []*LogMap {
	if x != nil {
		return x.LogList
	}
	return nil
}

type GetTaskInformationStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // 返回任务记录的状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInformationStatusResponse) Reset() {
	*x = GetTaskInformationStatusResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInformationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInformationStatusResponse) ProtoMessage() {}

func (x *GetTaskInformationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInformationStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTaskInformationStatusResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{23}
}

func (x *GetTaskInformationStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetPackageFinishedTaskCountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PackageId     string                 `protobuf:"bytes,1,opt,name=packageId,proto3" json:"packageId,omitempty"` // 模型或包的唯一识别id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPackageFinishedTaskCountRequest) Reset() {
	*x = GetPackageFinishedTaskCountRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageFinishedTaskCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageFinishedTaskCountRequest) ProtoMessage() {}

func (x *GetPackageFinishedTaskCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageFinishedTaskCountRequest.ProtoReflect.Descriptor instead.
func (*GetPackageFinishedTaskCountRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{24}
}

func (x *GetPackageFinishedTaskCountRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type GetPackageFinishedTaskCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 模型或包的唯一识别id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPackageFinishedTaskCountResponse) Reset() {
	*x = GetPackageFinishedTaskCountResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageFinishedTaskCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageFinishedTaskCountResponse) ProtoMessage() {}

func (x *GetPackageFinishedTaskCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageFinishedTaskCountResponse.ProtoReflect.Descriptor instead.
func (*GetPackageFinishedTaskCountResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{25}
}

func (x *GetPackageFinishedTaskCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetPackageFinishedTaskListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PackageId     string                 `protobuf:"bytes,1,opt,name=packageId,proto3" json:"packageId,omitempty"` // 模型或包的唯一识别id
	PageSize      int64                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`  // 分页的页号，默认为1，每页10条，不传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPackageFinishedTaskListRequest) Reset() {
	*x = GetPackageFinishedTaskListRequest{}
	mi := &file_taskInformationCenter_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageFinishedTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageFinishedTaskListRequest) ProtoMessage() {}

func (x *GetPackageFinishedTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageFinishedTaskListRequest.ProtoReflect.Descriptor instead.
func (*GetPackageFinishedTaskListRequest) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{26}
}

func (x *GetPackageFinishedTaskListRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *GetPackageFinishedTaskListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetPackageFinishedTaskResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uuid              string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                               // 任务唯一识别id
	UserName          string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`                                                                                       // 任务提交人
	SimulateStartTime int64                  `protobuf:"varint,3,opt,name=simulateStartTime,proto3" json:"simulateStartTime,omitempty"`                                                                    // 任务开始的时间
	SimulateStopTime  int64                  `protobuf:"varint,4,opt,name=simulateStopTime,proto3" json:"simulateStopTime,omitempty"`                                                                      // 任务结束的时间
	OutputInterval    float32                `protobuf:"fixed32,5,opt,name=outputInterval,proto3" json:"outputInterval,omitempty"`                                                                         // 仿真间隔
	SimulateResult    map[string]*Variable   `protobuf:"bytes,6,rep,name=simulateResult,proto3" json:"simulateResult,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 结果map
	StartTime         float32                `protobuf:"fixed32,7,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                   // 仿真开始时间
	StopTime          float32                `protobuf:"fixed32,8,opt,name=stopTime,proto3" json:"stopTime,omitempty"`                                                                                     // 仿真结束时间
	ResultAddress     string                 `protobuf:"bytes,9,opt,name=resultAddress,proto3" json:"resultAddress,omitempty"`                                                                             // 结果地址
	Tolerance         string                 `protobuf:"bytes,10,opt,name=tolerance,proto3" json:"tolerance,omitempty"`                                                                                    // 仿真容差
	NumberOfIntervals string                 `protobuf:"bytes,11,opt,name=numberOfIntervals,proto3" json:"numberOfIntervals,omitempty"`                                                                    // 仿真步数
	ModelName         string                 `protobuf:"bytes,12,opt,name=modelName,proto3" json:"modelName,omitempty"`                                                                                    // 仿真模型名
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetPackageFinishedTaskResponse) Reset() {
	*x = GetPackageFinishedTaskResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageFinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageFinishedTaskResponse) ProtoMessage() {}

func (x *GetPackageFinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageFinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetPackageFinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{27}
}

func (x *GetPackageFinishedTaskResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetPackageFinishedTaskResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetPackageFinishedTaskResponse) GetSimulateStartTime() int64 {
	if x != nil {
		return x.SimulateStartTime
	}
	return 0
}

func (x *GetPackageFinishedTaskResponse) GetSimulateStopTime() int64 {
	if x != nil {
		return x.SimulateStopTime
	}
	return 0
}

func (x *GetPackageFinishedTaskResponse) GetOutputInterval() float32 {
	if x != nil {
		return x.OutputInterval
	}
	return 0
}

func (x *GetPackageFinishedTaskResponse) GetSimulateResult() map[string]*Variable {
	if x != nil {
		return x.SimulateResult
	}
	return nil
}

func (x *GetPackageFinishedTaskResponse) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetPackageFinishedTaskResponse) GetStopTime() float32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *GetPackageFinishedTaskResponse) GetResultAddress() string {
	if x != nil {
		return x.ResultAddress
	}
	return ""
}

func (x *GetPackageFinishedTaskResponse) GetTolerance() string {
	if x != nil {
		return x.Tolerance
	}
	return ""
}

func (x *GetPackageFinishedTaskResponse) GetNumberOfIntervals() string {
	if x != nil {
		return x.NumberOfIntervals
	}
	return ""
}

func (x *GetPackageFinishedTaskResponse) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type GetPackageFinishedTaskListResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	TaskList      []*GetPackageFinishedTaskResponse `protobuf:"bytes,1,rep,name=taskList,proto3" json:"taskList,omitempty"` // 返回任务记录列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPackageFinishedTaskListResponse) Reset() {
	*x = GetPackageFinishedTaskListResponse{}
	mi := &file_taskInformationCenter_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageFinishedTaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageFinishedTaskListResponse) ProtoMessage() {}

func (x *GetPackageFinishedTaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskInformationCenter_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageFinishedTaskListResponse.ProtoReflect.Descriptor instead.
func (*GetPackageFinishedTaskListResponse) Descriptor() ([]byte, []int) {
	return file_taskInformationCenter_proto_rawDescGZIP(), []int{28}
}

func (x *GetPackageFinishedTaskListResponse) GetTaskList() []*GetPackageFinishedTaskResponse {
	if x != nil {
		return x.TaskList
	}
	return nil
}

var File_taskInformationCenter_proto protoreflect.FileDescriptor

var file_taskInformationCenter_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4f, 0x62, 0x6a, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x07, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x4d,
	0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x31, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3b,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa7, 0x0a, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x36, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x70,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x62, 0x6a,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x62, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x0a, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x36,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x0b,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x62, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x65, 0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x0a, 0x0a, 0x15, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x68, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x40, 0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x62, 0x0a,
	0x13, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x79, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x79, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x3a, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf3,
	0x04, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x71, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x62, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xca, 0x0f,
	0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x15, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x2e, 0x2e,
	0x2f, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taskInformationCenter_proto_rawDescOnce sync.Once
	file_taskInformationCenter_proto_rawDescData = file_taskInformationCenter_proto_rawDesc
)

func file_taskInformationCenter_proto_rawDescGZIP() []byte {
	file_taskInformationCenter_proto_rawDescOnce.Do(func() {
		file_taskInformationCenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_taskInformationCenter_proto_rawDescData)
	})
	return file_taskInformationCenter_proto_rawDescData
}

var file_taskInformationCenter_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_taskInformationCenter_proto_goTypes = []any{
	(*Variable)(nil),                                  // 0: taskInformationCenter.variable
	(*Library)(nil),                                   // 1: taskInformationCenter.library
	(*LogMap)(nil),                                    // 2: taskInformationCenter.logMap
	(*ParamObj)(nil),                                  // 3: taskInformationCenter.paramObj
	(*CalculateNode)(nil),                             // 4: taskInformationCenter.calculateNode
	(*DataMap)(nil),                                   // 5: taskInformationCenter.dataMap
	(*GetNodeTaskInformationRequest)(nil),             // 6: taskInformationCenter.GetNodeTaskInformationRequest
	(*GetTaskInformationRequest)(nil),                 // 7: taskInformationCenter.GetTaskInformationRequest
	(*GetTaskInformationListRequest)(nil),             // 8: taskInformationCenter.GetTaskInformationListRequest
	(*GetUserTaskInformationRequest)(nil),             // 9: taskInformationCenter.GetUserTaskInformationRequest
	(*GetDifferentTaskStatusInformationRequest)(nil),  // 10: taskInformationCenter.GetDifferentTaskStatusInformationRequest
	(*TaskInformationRequest)(nil),                    // 11: taskInformationCenter.TaskInformationRequest
	(*GetTaskInformationResponse)(nil),                // 12: taskInformationCenter.GetTaskInformationResponse
	(*UpdateTaskInformationResponse)(nil),             // 13: taskInformationCenter.UpdateTaskInformationResponse
	(*InsertTaskInformationResponse)(nil),             // 14: taskInformationCenter.InsertTaskInformationResponse
	(*TaskInformationRecord)(nil),                     // 15: taskInformationCenter.TaskInformationRecord
	(*GetUserTaskInformationResponse)(nil),            // 16: taskInformationCenter.GetUserTaskInformationResponse
	(*GetDifferentTaskStatusInformationResponse)(nil), // 17: taskInformationCenter.GetDifferentTaskStatusInformationResponse
	(*GetNodeTaskInformationResponse)(nil),            // 18: taskInformationCenter.GetNodeTaskInformationResponse
	(*GetTaskInformationListResponse)(nil),            // 19: taskInformationCenter.GetTaskInformationListResponse
	(*RecordStatus)(nil),                              // 20: taskInformationCenter.RecordStatus
	(*GetTaskInformationStatusListResponse)(nil),      // 21: taskInformationCenter.GetTaskInformationStatusListResponse
	(*GetTaskInformationLogResponse)(nil),             // 22: taskInformationCenter.GetTaskInformationLogResponse
	(*GetTaskInformationStatusResponse)(nil),          // 23: taskInformationCenter.GetTaskInformationStatusResponse
	(*GetPackageFinishedTaskCountRequest)(nil),        // 24: taskInformationCenter.GetPackageFinishedTaskCountRequest
	(*GetPackageFinishedTaskCountResponse)(nil),       // 25: taskInformationCenter.GetPackageFinishedTaskCountResponse
	(*GetPackageFinishedTaskListRequest)(nil),         // 26: taskInformationCenter.GetPackageFinishedTaskListRequest
	(*GetPackageFinishedTaskResponse)(nil),            // 27: taskInformationCenter.GetPackageFinishedTaskResponse
	(*GetPackageFinishedTaskListResponse)(nil),        // 28: taskInformationCenter.GetPackageFinishedTaskListResponse
	nil, // 29: taskInformationCenter.TaskInformationRequest.SimulateResultEntry
	nil, // 30: taskInformationCenter.GetTaskInformationResponse.SimulateResultEntry
	nil, // 31: taskInformationCenter.TaskInformationRecord.SimulateResultEntry
	nil, // 32: taskInformationCenter.GetPackageFinishedTaskResponse.SimulateResultEntry
}
var file_taskInformationCenter_proto_depIdxs = []int32{
	5,  // 0: taskInformationCenter.TaskInformationRequest.cpu:type_name -> taskInformationCenter.dataMap
	5,  // 1: taskInformationCenter.TaskInformationRequest.memory:type_name -> taskInformationCenter.dataMap
	2,  // 2: taskInformationCenter.TaskInformationRequest.log:type_name -> taskInformationCenter.logMap
	3,  // 3: taskInformationCenter.TaskInformationRequest.params:type_name -> taskInformationCenter.paramObj
	29, // 4: taskInformationCenter.TaskInformationRequest.simulateResult:type_name -> taskInformationCenter.TaskInformationRequest.SimulateResultEntry
	4,  // 5: taskInformationCenter.TaskInformationRequest.nodeInformation:type_name -> taskInformationCenter.calculateNode
	1,  // 6: taskInformationCenter.TaskInformationRequest.libraryList:type_name -> taskInformationCenter.library
	5,  // 7: taskInformationCenter.GetTaskInformationResponse.cpu:type_name -> taskInformationCenter.dataMap
	5,  // 8: taskInformationCenter.GetTaskInformationResponse.memory:type_name -> taskInformationCenter.dataMap
	2,  // 9: taskInformationCenter.GetTaskInformationResponse.log:type_name -> taskInformationCenter.logMap
	3,  // 10: taskInformationCenter.GetTaskInformationResponse.params:type_name -> taskInformationCenter.paramObj
	30, // 11: taskInformationCenter.GetTaskInformationResponse.simulateResult:type_name -> taskInformationCenter.GetTaskInformationResponse.SimulateResultEntry
	4,  // 12: taskInformationCenter.GetTaskInformationResponse.nodeInformation:type_name -> taskInformationCenter.calculateNode
	1,  // 13: taskInformationCenter.GetTaskInformationResponse.libraryList:type_name -> taskInformationCenter.library
	5,  // 14: taskInformationCenter.TaskInformationRecord.cpu:type_name -> taskInformationCenter.dataMap
	5,  // 15: taskInformationCenter.TaskInformationRecord.memory:type_name -> taskInformationCenter.dataMap
	2,  // 16: taskInformationCenter.TaskInformationRecord.log:type_name -> taskInformationCenter.logMap
	3,  // 17: taskInformationCenter.TaskInformationRecord.params:type_name -> taskInformationCenter.paramObj
	31, // 18: taskInformationCenter.TaskInformationRecord.simulateResult:type_name -> taskInformationCenter.TaskInformationRecord.SimulateResultEntry
	4,  // 19: taskInformationCenter.TaskInformationRecord.nodeInformation:type_name -> taskInformationCenter.calculateNode
	1,  // 20: taskInformationCenter.TaskInformationRecord.libraryList:type_name -> taskInformationCenter.library
	15, // 21: taskInformationCenter.GetUserTaskInformationResponse.information_list:type_name -> taskInformationCenter.TaskInformationRecord
	15, // 22: taskInformationCenter.GetNodeTaskInformationResponse.information_list:type_name -> taskInformationCenter.TaskInformationRecord
	15, // 23: taskInformationCenter.GetTaskInformationListResponse.information_list:type_name -> taskInformationCenter.TaskInformationRecord
	20, // 24: taskInformationCenter.GetTaskInformationStatusListResponse.recordStatus:type_name -> taskInformationCenter.RecordStatus
	2,  // 25: taskInformationCenter.GetTaskInformationLogResponse.logList:type_name -> taskInformationCenter.logMap
	32, // 26: taskInformationCenter.GetPackageFinishedTaskResponse.simulateResult:type_name -> taskInformationCenter.GetPackageFinishedTaskResponse.SimulateResultEntry
	27, // 27: taskInformationCenter.GetPackageFinishedTaskListResponse.taskList:type_name -> taskInformationCenter.GetPackageFinishedTaskResponse
	0,  // 28: taskInformationCenter.TaskInformationRequest.SimulateResultEntry.value:type_name -> taskInformationCenter.variable
	0,  // 29: taskInformationCenter.GetTaskInformationResponse.SimulateResultEntry.value:type_name -> taskInformationCenter.variable
	0,  // 30: taskInformationCenter.TaskInformationRecord.SimulateResultEntry.value:type_name -> taskInformationCenter.variable
	0,  // 31: taskInformationCenter.GetPackageFinishedTaskResponse.SimulateResultEntry.value:type_name -> taskInformationCenter.variable
	7,  // 32: taskInformationCenter.TaskInformation.GetTaskInformation:input_type -> taskInformationCenter.GetTaskInformationRequest
	8,  // 33: taskInformationCenter.TaskInformation.GetTaskInformationList:input_type -> taskInformationCenter.GetTaskInformationListRequest
	8,  // 34: taskInformationCenter.TaskInformation.GetTaskInformationStatusList:input_type -> taskInformationCenter.GetTaskInformationListRequest
	6,  // 35: taskInformationCenter.TaskInformation.GetNodeTaskInformation:input_type -> taskInformationCenter.GetNodeTaskInformationRequest
	6,  // 36: taskInformationCenter.TaskInformation.GetNodeStatusTaskInformation:input_type -> taskInformationCenter.GetNodeTaskInformationRequest
	6,  // 37: taskInformationCenter.TaskInformation.GetNodeUndoneTaskInformation:input_type -> taskInformationCenter.GetNodeTaskInformationRequest
	9,  // 38: taskInformationCenter.TaskInformation.GetUserTaskInformation:input_type -> taskInformationCenter.GetUserTaskInformationRequest
	10, // 39: taskInformationCenter.TaskInformation.GetDifferentTaskStatusInformation:input_type -> taskInformationCenter.GetDifferentTaskStatusInformationRequest
	11, // 40: taskInformationCenter.TaskInformation.UpdateTaskInformation:input_type -> taskInformationCenter.TaskInformationRequest
	11, // 41: taskInformationCenter.TaskInformation.InsertTaskInformation:input_type -> taskInformationCenter.TaskInformationRequest
	7,  // 42: taskInformationCenter.TaskInformation.GetTaskInformationLog:input_type -> taskInformationCenter.GetTaskInformationRequest
	7,  // 43: taskInformationCenter.TaskInformation.GetTaskInformationStatus:input_type -> taskInformationCenter.GetTaskInformationRequest
	26, // 44: taskInformationCenter.TaskInformation.GetPackageFinishedTaskList:input_type -> taskInformationCenter.GetPackageFinishedTaskListRequest
	24, // 45: taskInformationCenter.TaskInformation.GetPackageFinishedTaskCount:input_type -> taskInformationCenter.GetPackageFinishedTaskCountRequest
	12, // 46: taskInformationCenter.TaskInformation.GetTaskInformation:output_type -> taskInformationCenter.GetTaskInformationResponse
	19, // 47: taskInformationCenter.TaskInformation.GetTaskInformationList:output_type -> taskInformationCenter.GetTaskInformationListResponse
	21, // 48: taskInformationCenter.TaskInformation.GetTaskInformationStatusList:output_type -> taskInformationCenter.GetTaskInformationStatusListResponse
	18, // 49: taskInformationCenter.TaskInformation.GetNodeTaskInformation:output_type -> taskInformationCenter.GetNodeTaskInformationResponse
	18, // 50: taskInformationCenter.TaskInformation.GetNodeStatusTaskInformation:output_type -> taskInformationCenter.GetNodeTaskInformationResponse
	18, // 51: taskInformationCenter.TaskInformation.GetNodeUndoneTaskInformation:output_type -> taskInformationCenter.GetNodeTaskInformationResponse
	16, // 52: taskInformationCenter.TaskInformation.GetUserTaskInformation:output_type -> taskInformationCenter.GetUserTaskInformationResponse
	17, // 53: taskInformationCenter.TaskInformation.GetDifferentTaskStatusInformation:output_type -> taskInformationCenter.GetDifferentTaskStatusInformationResponse
	13, // 54: taskInformationCenter.TaskInformation.UpdateTaskInformation:output_type -> taskInformationCenter.UpdateTaskInformationResponse
	14, // 55: taskInformationCenter.TaskInformation.InsertTaskInformation:output_type -> taskInformationCenter.InsertTaskInformationResponse
	22, // 56: taskInformationCenter.TaskInformation.GetTaskInformationLog:output_type -> taskInformationCenter.GetTaskInformationLogResponse
	23, // 57: taskInformationCenter.TaskInformation.GetTaskInformationStatus:output_type -> taskInformationCenter.GetTaskInformationStatusResponse
	28, // 58: taskInformationCenter.TaskInformation.GetPackageFinishedTaskList:output_type -> taskInformationCenter.GetPackageFinishedTaskListResponse
	25, // 59: taskInformationCenter.TaskInformation.GetPackageFinishedTaskCount:output_type -> taskInformationCenter.GetPackageFinishedTaskCountResponse
	46, // [46:60] is the sub-list for method output_type
	32, // [32:46] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_taskInformationCenter_proto_init() }
func file_taskInformationCenter_proto_init() {
	if File_taskInformationCenter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taskInformationCenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taskInformationCenter_proto_goTypes,
		DependencyIndexes: file_taskInformationCenter_proto_depIdxs,
		MessageInfos:      file_taskInformationCenter_proto_msgTypes,
	}.Build()
	File_taskInformationCenter_proto = out.File
	file_taskInformationCenter_proto_rawDesc = nil
	file_taskInformationCenter_proto_goTypes = nil
	file_taskInformationCenter_proto_depIdxs = nil
}
