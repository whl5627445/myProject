# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import router_pb2 as router__pb2


class GreeterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FmuSimulation = channel.unary_unary(
                '/Greeter/FmuSimulation',
                request_serializer=router__pb2.FmuSimulationRequest.SerializeToString,
                response_deserializer=router__pb2.FmuSimulationReply.FromString,
                )
        self.GetProcessStatus = channel.unary_unary(
                '/Greeter/GetProcessStatus',
                request_serializer=router__pb2.GetProcessStatusRequest.SerializeToString,
                response_deserializer=router__pb2.GetProcessStatusReply.FromString,
                )
        self.GetAllProcessNumber = channel.unary_unary(
                '/Greeter/GetAllProcessNumber',
                request_serializer=router__pb2.GetAllProcessNumberRequest.SerializeToString,
                response_deserializer=router__pb2.GetAllProcessNumberReply.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/Greeter/GetResult',
                request_serializer=router__pb2.GetResultRequest.SerializeToString,
                response_deserializer=router__pb2.GetResultReply.FromString,
                )
        self.ProcessOperation = channel.unary_unary(
                '/Greeter/ProcessOperation',
                request_serializer=router__pb2.ProcessOperationRequest.SerializeToString,
                response_deserializer=router__pb2.ProcessOperationReply.FromString,
                )
        self.ReadSimulationResult = channel.unary_unary(
                '/Greeter/ReadSimulationResult',
                request_serializer=router__pb2.ReadSimulationResultRequest.SerializeToString,
                response_deserializer=router__pb2.ReadSimulationResultReply.FromString,
                )
        self.MatToCsv = channel.unary_unary(
                '/Greeter/MatToCsv',
                request_serializer=router__pb2.MatToCsvRequest.SerializeToString,
                response_deserializer=router__pb2.MatToCsvReply.FromString,
                )
        self.ZarrToCsv = channel.unary_unary(
                '/Greeter/ZarrToCsv',
                request_serializer=router__pb2.ZarrToCsvRequest.SerializeToString,
                response_deserializer=router__pb2.ZarrToCsvReply.FromString,
                )
        self.CheckVarExist = channel.unary_unary(
                '/Greeter/CheckVarExist',
                request_serializer=router__pb2.CheckVarExistRequest.SerializeToString,
                response_deserializer=router__pb2.CheckVarExistReply.FromString,
                )
        self.Simulation = channel.unary_unary(
                '/Greeter/Simulation',
                request_serializer=router__pb2.SimulationRequest.SerializeToString,
                response_deserializer=router__pb2.SimulationReply.FromString,
                )


class GreeterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FmuSimulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcessStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllProcessNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadSimulationResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MatToCsv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZarrToCsv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckVarExist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Simulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FmuSimulation': grpc.unary_unary_rpc_method_handler(
                    servicer.FmuSimulation,
                    request_deserializer=router__pb2.FmuSimulationRequest.FromString,
                    response_serializer=router__pb2.FmuSimulationReply.SerializeToString,
            ),
            'GetProcessStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcessStatus,
                    request_deserializer=router__pb2.GetProcessStatusRequest.FromString,
                    response_serializer=router__pb2.GetProcessStatusReply.SerializeToString,
            ),
            'GetAllProcessNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllProcessNumber,
                    request_deserializer=router__pb2.GetAllProcessNumberRequest.FromString,
                    response_serializer=router__pb2.GetAllProcessNumberReply.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=router__pb2.GetResultRequest.FromString,
                    response_serializer=router__pb2.GetResultReply.SerializeToString,
            ),
            'ProcessOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessOperation,
                    request_deserializer=router__pb2.ProcessOperationRequest.FromString,
                    response_serializer=router__pb2.ProcessOperationReply.SerializeToString,
            ),
            'ReadSimulationResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSimulationResult,
                    request_deserializer=router__pb2.ReadSimulationResultRequest.FromString,
                    response_serializer=router__pb2.ReadSimulationResultReply.SerializeToString,
            ),
            'MatToCsv': grpc.unary_unary_rpc_method_handler(
                    servicer.MatToCsv,
                    request_deserializer=router__pb2.MatToCsvRequest.FromString,
                    response_serializer=router__pb2.MatToCsvReply.SerializeToString,
            ),
            'ZarrToCsv': grpc.unary_unary_rpc_method_handler(
                    servicer.ZarrToCsv,
                    request_deserializer=router__pb2.ZarrToCsvRequest.FromString,
                    response_serializer=router__pb2.ZarrToCsvReply.SerializeToString,
            ),
            'CheckVarExist': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckVarExist,
                    request_deserializer=router__pb2.CheckVarExistRequest.FromString,
                    response_serializer=router__pb2.CheckVarExistReply.SerializeToString,
            ),
            'Simulation': grpc.unary_unary_rpc_method_handler(
                    servicer.Simulation,
                    request_deserializer=router__pb2.SimulationRequest.FromString,
                    response_serializer=router__pb2.SimulationReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FmuSimulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/FmuSimulation',
            router__pb2.FmuSimulationRequest.SerializeToString,
            router__pb2.FmuSimulationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProcessStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/GetProcessStatus',
            router__pb2.GetProcessStatusRequest.SerializeToString,
            router__pb2.GetProcessStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllProcessNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/GetAllProcessNumber',
            router__pb2.GetAllProcessNumberRequest.SerializeToString,
            router__pb2.GetAllProcessNumberReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/GetResult',
            router__pb2.GetResultRequest.SerializeToString,
            router__pb2.GetResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/ProcessOperation',
            router__pb2.ProcessOperationRequest.SerializeToString,
            router__pb2.ProcessOperationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadSimulationResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/ReadSimulationResult',
            router__pb2.ReadSimulationResultRequest.SerializeToString,
            router__pb2.ReadSimulationResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MatToCsv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/MatToCsv',
            router__pb2.MatToCsvRequest.SerializeToString,
            router__pb2.MatToCsvReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZarrToCsv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/ZarrToCsv',
            router__pb2.ZarrToCsvRequest.SerializeToString,
            router__pb2.ZarrToCsvReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckVarExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/CheckVarExist',
            router__pb2.CheckVarExistRequest.SerializeToString,
            router__pb2.CheckVarExistReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Simulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/Simulation',
            router__pb2.SimulationRequest.SerializeToString,
            router__pb2.SimulationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
