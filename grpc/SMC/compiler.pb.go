// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: compiler.proto

package smc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelInstanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=modelName,proto3" json:"modelName,omitempty"` // 模型名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelInstanceRequest) Reset() {
	*x = ModelInstanceRequest{}
	mi := &file_compiler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInstanceRequest) ProtoMessage() {}

func (x *ModelInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInstanceRequest.ProtoReflect.Descriptor instead.
func (*ModelInstanceRequest) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{0}
}

func (x *ModelInstanceRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type ModelInstanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         []byte                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelInstanceResponse) Reset() {
	*x = ModelInstanceResponse{}
	mi := &file_compiler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInstanceResponse) ProtoMessage() {}

func (x *ModelInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInstanceResponse.ProtoReflect.Descriptor instead.
func (*ModelInstanceResponse) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{1}
}

func (x *ModelInstanceResponse) GetModel() []byte {
	if x != nil {
		return x.Model
	}
	return nil
}

type LoadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // 模型名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFileRequest) Reset() {
	*x = LoadFileRequest{}
	mi := &file_compiler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileRequest) ProtoMessage() {}

func (x *LoadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileRequest.ProtoReflect.Descriptor instead.
func (*LoadFileRequest) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{2}
}

func (x *LoadFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type LoadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFileResponse) Reset() {
	*x = LoadFileResponse{}
	mi := &file_compiler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileResponse) ProtoMessage() {}

func (x *LoadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileResponse.ProtoReflect.Descriptor instead.
func (*LoadFileResponse) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{3}
}

func (x *LoadFileResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *LoadFileResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ClassDefinition struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClassPrefixes  *ClassPrefixes         `protobuf:"bytes,1,opt,name=classPrefixes,proto3" json:"classPrefixes,omitempty"`
	ClassSpecifier *ClassSpecifier        `protobuf:"bytes,2,opt,name=classSpecifier,proto3" json:"classSpecifier,omitempty"`
	PackageName    string                 `protobuf:"bytes,3,opt,name=packageName,proto3" json:"packageName,omitempty"`
	Encapsulated   bool                   `protobuf:"varint,4,opt,name=encapsulated,proto3" json:"encapsulated,omitempty"`
	Final          bool                   `protobuf:"varint,5,opt,name=final,proto3" json:"final,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClassDefinition) Reset() {
	*x = ClassDefinition{}
	mi := &file_compiler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassDefinition) ProtoMessage() {}

func (x *ClassDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassDefinition.ProtoReflect.Descriptor instead.
func (*ClassDefinition) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{4}
}

func (x *ClassDefinition) GetClassPrefixes() *ClassPrefixes {
	if x != nil {
		return x.ClassPrefixes
	}
	return nil
}

func (x *ClassDefinition) GetClassSpecifier() *ClassSpecifier {
	if x != nil {
		return x.ClassSpecifier
	}
	return nil
}

func (x *ClassDefinition) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ClassDefinition) GetEncapsulated() bool {
	if x != nil {
		return x.Encapsulated
	}
	return false
}

func (x *ClassDefinition) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

type ClassPrefixes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partial       bool                   `protobuf:"varint,1,opt,name=partial,proto3" json:"partial,omitempty"`
	Prefixes      string                 `protobuf:"bytes,2,opt,name=prefixes,proto3" json:"prefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClassPrefixes) Reset() {
	*x = ClassPrefixes{}
	mi := &file_compiler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassPrefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassPrefixes) ProtoMessage() {}

func (x *ClassPrefixes) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassPrefixes.ProtoReflect.Descriptor instead.
func (*ClassPrefixes) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{5}
}

func (x *ClassPrefixes) GetPartial() bool {
	if x != nil {
		return x.Partial
	}
	return false
}

func (x *ClassPrefixes) GetPrefixes() string {
	if x != nil {
		return x.Prefixes
	}
	return ""
}

type ClassSpecifier struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent            string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Extends           bool                   `protobuf:"varint,5,opt,name=extends,proto3" json:"extends,omitempty"`
	ClassModification []*Argument            `protobuf:"bytes,6,rep,name=classModification,proto3" json:"classModification,omitempty"`
	Composition       *Composition           `protobuf:"bytes,7,opt,name=composition,proto3" json:"composition,omitempty"`
	Annotation        []*Argument            `protobuf:"bytes,8,rep,name=annotation,proto3" json:"annotation,omitempty"`
	BasePrefix        string                 `protobuf:"bytes,9,opt,name=basePrefix,proto3" json:"basePrefix,omitempty"`
	Specifier         string                 `protobuf:"bytes,10,opt,name=specifier,proto3" json:"specifier,omitempty"`
	ArraySubscripts   []string               `protobuf:"bytes,11,rep,name=array_subscripts,json=arraySubscripts,proto3" json:"array_subscripts,omitempty"`
	Enumeration       bool                   `protobuf:"varint,12,opt,name=enumeration,proto3" json:"enumeration,omitempty"`
	EnumList          []*EnumerationLiteral  `protobuf:"bytes,13,rep,name=enum_list,json=enumList,proto3" json:"enum_list,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClassSpecifier) Reset() {
	*x = ClassSpecifier{}
	mi := &file_compiler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassSpecifier) ProtoMessage() {}

func (x *ClassSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassSpecifier.ProtoReflect.Descriptor instead.
func (*ClassSpecifier) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{6}
}

func (x *ClassSpecifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassSpecifier) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ClassSpecifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClassSpecifier) GetExtends() bool {
	if x != nil {
		return x.Extends
	}
	return false
}

func (x *ClassSpecifier) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *ClassSpecifier) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *ClassSpecifier) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ClassSpecifier) GetBasePrefix() string {
	if x != nil {
		return x.BasePrefix
	}
	return ""
}

func (x *ClassSpecifier) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *ClassSpecifier) GetArraySubscripts() []string {
	if x != nil {
		return x.ArraySubscripts
	}
	return nil
}

func (x *ClassSpecifier) GetEnumeration() bool {
	if x != nil {
		return x.Enumeration
	}
	return false
}

func (x *ClassSpecifier) GetEnumList() []*EnumerationLiteral {
	if x != nil {
		return x.EnumList
	}
	return nil
}

type Argument struct {
	state                            protoimpl.MessageState            `protogen:"open.v1"`
	Each                             bool                              `protobuf:"varint,1,opt,name=each,proto3" json:"each,omitempty"`
	Final                            bool                              `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Name                             string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Data                             *structpb.Struct                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Binding                          string                            `protobuf:"bytes,5,opt,name=binding,proto3" json:"binding,omitempty"`
	Children                         []*Argument                       `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	ElementReplaceable               *ElementReplaceable               `protobuf:"bytes,14,opt,name=elementReplaceable,proto3" json:"elementReplaceable,omitempty"`
	ElementModification              *ElementModification              `protobuf:"bytes,15,opt,name=elementModification,proto3" json:"elementModification,omitempty"`
	ElementRedeclaration             *ElementRedeclaration             `protobuf:"bytes,16,opt,name=elementRedeclaration,proto3" json:"elementRedeclaration,omitempty"`
	ElementModificationOrReplaceable *ElementModificationOrReplaceable `protobuf:"bytes,17,opt,name=elementModificationOrReplaceable,proto3" json:"elementModificationOrReplaceable,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Argument) Reset() {
	*x = Argument{}
	mi := &file_compiler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{7}
}

func (x *Argument) GetEach() bool {
	if x != nil {
		return x.Each
	}
	return false
}

func (x *Argument) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Argument) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *Argument) GetChildren() []*Argument {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Argument) GetElementReplaceable() *ElementReplaceable {
	if x != nil {
		return x.ElementReplaceable
	}
	return nil
}

func (x *Argument) GetElementModification() *ElementModification {
	if x != nil {
		return x.ElementModification
	}
	return nil
}

func (x *Argument) GetElementRedeclaration() *ElementRedeclaration {
	if x != nil {
		return x.ElementRedeclaration
	}
	return nil
}

func (x *Argument) GetElementModificationOrReplaceable() *ElementModificationOrReplaceable {
	if x != nil {
		return x.ElementModificationOrReplaceable
	}
	return nil
}

type Composition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ElementList           []*Element             `protobuf:"bytes,1,rep,name=elementList,proto3" json:"elementList,omitempty"`
	PublicElementList     []*Element             `protobuf:"bytes,2,rep,name=publicElementList,proto3" json:"publicElementList,omitempty"`
	ProtectedElementList  []*Element             `protobuf:"bytes,3,rep,name=protectedElementList,proto3" json:"protectedElementList,omitempty"`
	EquationSection       []*EquationSection     `protobuf:"bytes,4,rep,name=equationSection,proto3" json:"equationSection,omitempty"`
	AlgorithmSection      []*AlgorithmSection    `protobuf:"bytes,5,rep,name=algorithmSection,proto3" json:"algorithmSection,omitempty"`
	ExternalComposition   []*ExternalComposition `protobuf:"bytes,6,rep,name=externalComposition,proto3" json:"externalComposition,omitempty"`
	LanguageSpecification string                 `protobuf:"bytes,7,opt,name=LanguageSpecification,proto3" json:"LanguageSpecification,omitempty"`
	ExternalFunctionCall  string                 `protobuf:"bytes,8,opt,name=ExternalFunctionCall,proto3" json:"ExternalFunctionCall,omitempty"`
	Annotation            []*Argument            `protobuf:"bytes,9,rep,name=annotation,proto3" json:"annotation,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Composition) Reset() {
	*x = Composition{}
	mi := &file_compiler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Composition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition) ProtoMessage() {}

func (x *Composition) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition.ProtoReflect.Descriptor instead.
func (*Composition) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{8}
}

func (x *Composition) GetElementList() []*Element {
	if x != nil {
		return x.ElementList
	}
	return nil
}

func (x *Composition) GetPublicElementList() []*Element {
	if x != nil {
		return x.PublicElementList
	}
	return nil
}

func (x *Composition) GetProtectedElementList() []*Element {
	if x != nil {
		return x.ProtectedElementList
	}
	return nil
}

func (x *Composition) GetEquationSection() []*EquationSection {
	if x != nil {
		return x.EquationSection
	}
	return nil
}

func (x *Composition) GetAlgorithmSection() []*AlgorithmSection {
	if x != nil {
		return x.AlgorithmSection
	}
	return nil
}

func (x *Composition) GetExternalComposition() []*ExternalComposition {
	if x != nil {
		return x.ExternalComposition
	}
	return nil
}

func (x *Composition) GetLanguageSpecification() string {
	if x != nil {
		return x.LanguageSpecification
	}
	return ""
}

func (x *Composition) GetExternalFunctionCall() string {
	if x != nil {
		return x.ExternalFunctionCall
	}
	return ""
}

func (x *Composition) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type EnumerationLiteral struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   *Description           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumerationLiteral) Reset() {
	*x = EnumerationLiteral{}
	mi := &file_compiler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumerationLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumerationLiteral) ProtoMessage() {}

func (x *EnumerationLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumerationLiteral.ProtoReflect.Descriptor instead.
func (*EnumerationLiteral) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{9}
}

func (x *EnumerationLiteral) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumerationLiteral) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

type Description struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Annotation    []*Argument            `protobuf:"bytes,2,rep,name=annotation,proto3" json:"annotation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Description) Reset() {
	*x = Description{}
	mi := &file_compiler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Description) ProtoMessage() {}

func (x *Description) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Description.ProtoReflect.Descriptor instead.
func (*Description) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{10}
}

func (x *Description) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Description) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type ElementReplaceable struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Replaceable         bool                   `protobuf:"varint,1,opt,name=replaceable,proto3" json:"replaceable,omitempty"`
	ClassPrefixes       *ClassPrefixes         `protobuf:"bytes,2,opt,name=classPrefixes,proto3" json:"classPrefixes,omitempty"`
	ShortClassSpecifier *ShortClassSpecifier   `protobuf:"bytes,3,opt,name=shortClassSpecifier,proto3" json:"shortClassSpecifier,omitempty"`
	Prefix              string                 `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Specifier           string                 `protobuf:"bytes,5,opt,name=specifier,proto3" json:"specifier,omitempty"`
	Declaration         *Declaration           `protobuf:"bytes,6,opt,name=declaration,proto3" json:"declaration,omitempty"`
	Description         *Description           `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Constrainedby       bool                   `protobuf:"varint,8,opt,name=constrainedby,proto3" json:"constrainedby,omitempty"`
	ClassModification   *ClassModification     `protobuf:"bytes,9,opt,name=classModification,proto3" json:"classModification,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ElementReplaceable) Reset() {
	*x = ElementReplaceable{}
	mi := &file_compiler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementReplaceable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementReplaceable) ProtoMessage() {}

func (x *ElementReplaceable) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementReplaceable.ProtoReflect.Descriptor instead.
func (*ElementReplaceable) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{11}
}

func (x *ElementReplaceable) GetReplaceable() bool {
	if x != nil {
		return x.Replaceable
	}
	return false
}

func (x *ElementReplaceable) GetClassPrefixes() *ClassPrefixes {
	if x != nil {
		return x.ClassPrefixes
	}
	return nil
}

func (x *ElementReplaceable) GetShortClassSpecifier() *ShortClassSpecifier {
	if x != nil {
		return x.ShortClassSpecifier
	}
	return nil
}

func (x *ElementReplaceable) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ElementReplaceable) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *ElementReplaceable) GetDeclaration() *Declaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *ElementReplaceable) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementReplaceable) GetConstrainedby() bool {
	if x != nil {
		return x.Constrainedby
	}
	return false
}

func (x *ElementReplaceable) GetClassModification() *ClassModification {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

type ElementModification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Modification  *Modification          `protobuf:"bytes,2,opt,name=modification,proto3" json:"modification,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementModification) Reset() {
	*x = ElementModification{}
	mi := &file_compiler_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementModification) ProtoMessage() {}

func (x *ElementModification) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementModification.ProtoReflect.Descriptor instead.
func (*ElementModification) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{12}
}

func (x *ElementModification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ElementModification) GetModification() *Modification {
	if x != nil {
		return x.Modification
	}
	return nil
}

func (x *ElementModification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ElementRedeclaration struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Redeclare           bool                   `protobuf:"varint,1,opt,name=redeclare,proto3" json:"redeclare,omitempty"`
	Each                bool                   `protobuf:"varint,2,opt,name=each,proto3" json:"each,omitempty"`
	Final               bool                   `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`
	ClassPrefixes       *ClassPrefixes         `protobuf:"bytes,4,opt,name=classPrefixes,proto3" json:"classPrefixes,omitempty"`
	ShortClassSpecifier *ShortClassSpecifier   `protobuf:"bytes,5,opt,name=shortClassSpecifier,proto3" json:"shortClassSpecifier,omitempty"`
	ComponentClause1    *ComponentClause1      `protobuf:"bytes,6,opt,name=componentClause1,proto3" json:"componentClause1,omitempty"`
	ElementReplaceable  *ElementReplaceable    `protobuf:"bytes,7,opt,name=elementReplaceable,proto3" json:"elementReplaceable,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ElementRedeclaration) Reset() {
	*x = ElementRedeclaration{}
	mi := &file_compiler_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementRedeclaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementRedeclaration) ProtoMessage() {}

func (x *ElementRedeclaration) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementRedeclaration.ProtoReflect.Descriptor instead.
func (*ElementRedeclaration) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{13}
}

func (x *ElementRedeclaration) GetRedeclare() bool {
	if x != nil {
		return x.Redeclare
	}
	return false
}

func (x *ElementRedeclaration) GetEach() bool {
	if x != nil {
		return x.Each
	}
	return false
}

func (x *ElementRedeclaration) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ElementRedeclaration) GetClassPrefixes() *ClassPrefixes {
	if x != nil {
		return x.ClassPrefixes
	}
	return nil
}

func (x *ElementRedeclaration) GetShortClassSpecifier() *ShortClassSpecifier {
	if x != nil {
		return x.ShortClassSpecifier
	}
	return nil
}

func (x *ElementRedeclaration) GetComponentClause1() *ComponentClause1 {
	if x != nil {
		return x.ComponentClause1
	}
	return nil
}

func (x *ElementRedeclaration) GetElementReplaceable() *ElementReplaceable {
	if x != nil {
		return x.ElementReplaceable
	}
	return nil
}

type ElementModificationOrReplaceable struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Each                bool                   `protobuf:"varint,1,opt,name=each,proto3" json:"each,omitempty"`
	Final               bool                   `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Name                string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ElementModification *ElementModification   `protobuf:"bytes,4,opt,name=elementModification,proto3" json:"elementModification,omitempty"`
	ElementReplaceable  *ElementReplaceable    `protobuf:"bytes,5,opt,name=elementReplaceable,proto3" json:"elementReplaceable,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ElementModificationOrReplaceable) Reset() {
	*x = ElementModificationOrReplaceable{}
	mi := &file_compiler_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementModificationOrReplaceable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementModificationOrReplaceable) ProtoMessage() {}

func (x *ElementModificationOrReplaceable) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementModificationOrReplaceable.ProtoReflect.Descriptor instead.
func (*ElementModificationOrReplaceable) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{14}
}

func (x *ElementModificationOrReplaceable) GetEach() bool {
	if x != nil {
		return x.Each
	}
	return false
}

func (x *ElementModificationOrReplaceable) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ElementModificationOrReplaceable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ElementModificationOrReplaceable) GetElementModification() *ElementModification {
	if x != nil {
		return x.ElementModification
	}
	return nil
}

func (x *ElementModificationOrReplaceable) GetElementReplaceable() *ElementReplaceable {
	if x != nil {
		return x.ElementReplaceable
	}
	return nil
}

type Element struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	ImportClause                   bool                            `protobuf:"varint,1,opt,name=importClause,proto3" json:"importClause,omitempty"`
	ImportClauseName               string                          `protobuf:"bytes,2,opt,name=importClauseName,proto3" json:"importClauseName,omitempty"`
	ExtendsClause                  bool                            `protobuf:"varint,3,opt,name=extendsClause,proto3" json:"extendsClause,omitempty"`
	TypeSpecifier                  string                          `protobuf:"bytes,4,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"`
	InheritanceModification        *InheritanceModification        `protobuf:"bytes,5,opt,name=inheritanceModification,proto3" json:"inheritanceModification,omitempty"`
	Annotation                     []*Argument                     `protobuf:"bytes,6,rep,name=annotation,proto3" json:"annotation,omitempty"`
	Binding                        string                          `protobuf:"bytes,7,opt,name=binding,proto3" json:"binding,omitempty"`
	Redeclare                      bool                            `protobuf:"varint,8,opt,name=redeclare,proto3" json:"redeclare,omitempty"`
	Final                          bool                            `protobuf:"varint,9,opt,name=final,proto3" json:"final,omitempty"`
	Inner                          bool                            `protobuf:"varint,10,opt,name=inner,proto3" json:"inner,omitempty"`
	Outer                          bool                            `protobuf:"varint,11,opt,name=outer,proto3" json:"outer,omitempty"`
	ClassDefinition                *ClassDefinition                `protobuf:"bytes,12,opt,name=classDefinition,proto3" json:"classDefinition,omitempty"`
	TypePrefix                     string                          `protobuf:"bytes,13,opt,name=typePrefix,proto3" json:"typePrefix,omitempty"`
	ArraySubscripts                []string                        `protobuf:"bytes,14,rep,name=arraySubscripts,proto3" json:"arraySubscripts,omitempty"`
	Name                           string                          `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	ConditionAttribute             string                          `protobuf:"bytes,16,opt,name=conditionAttribute,proto3" json:"conditionAttribute,omitempty"`
	Replaceable                    bool                            `protobuf:"varint,17,opt,name=replaceable,proto3" json:"replaceable,omitempty"`
	ConstrainingClause             *ConstrainingClause             `protobuf:"bytes,18,opt,name=constrainingClause,proto3" json:"constrainingClause,omitempty"`
	Constrainedby                  bool                            `protobuf:"varint,19,opt,name=constrainedby,proto3" json:"constrainedby,omitempty"`
	ClassModification              []*Argument                     `protobuf:"bytes,20,rep,name=classModification,proto3" json:"classModification,omitempty"`
	Description                    string                          `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	Modification                   *Modification                   `protobuf:"bytes,22,opt,name=modification,proto3" json:"modification,omitempty"`
	Parent                         string                          `protobuf:"bytes,23,opt,name=parent,proto3" json:"parent,omitempty"`
	ClassOrInheritanceModification *ClassOrInheritanceModification `protobuf:"bytes,24,opt,name=classOrInheritanceModification,proto3" json:"classOrInheritanceModification,omitempty"`
	Instance                       *ClassDefinition                `protobuf:"bytes,25,opt,name=instance,proto3" json:"instance,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Element) Reset() {
	*x = Element{}
	mi := &file_compiler_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{15}
}

func (x *Element) GetImportClause() bool {
	if x != nil {
		return x.ImportClause
	}
	return false
}

func (x *Element) GetImportClauseName() string {
	if x != nil {
		return x.ImportClauseName
	}
	return ""
}

func (x *Element) GetExtendsClause() bool {
	if x != nil {
		return x.ExtendsClause
	}
	return false
}

func (x *Element) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *Element) GetInheritanceModification() *InheritanceModification {
	if x != nil {
		return x.InheritanceModification
	}
	return nil
}

func (x *Element) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *Element) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *Element) GetRedeclare() bool {
	if x != nil {
		return x.Redeclare
	}
	return false
}

func (x *Element) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *Element) GetInner() bool {
	if x != nil {
		return x.Inner
	}
	return false
}

func (x *Element) GetOuter() bool {
	if x != nil {
		return x.Outer
	}
	return false
}

func (x *Element) GetClassDefinition() *ClassDefinition {
	if x != nil {
		return x.ClassDefinition
	}
	return nil
}

func (x *Element) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

func (x *Element) GetArraySubscripts() []string {
	if x != nil {
		return x.ArraySubscripts
	}
	return nil
}

func (x *Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Element) GetConditionAttribute() string {
	if x != nil {
		return x.ConditionAttribute
	}
	return ""
}

func (x *Element) GetReplaceable() bool {
	if x != nil {
		return x.Replaceable
	}
	return false
}

func (x *Element) GetConstrainingClause() *ConstrainingClause {
	if x != nil {
		return x.ConstrainingClause
	}
	return nil
}

func (x *Element) GetConstrainedby() bool {
	if x != nil {
		return x.Constrainedby
	}
	return false
}

func (x *Element) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *Element) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Element) GetModification() *Modification {
	if x != nil {
		return x.Modification
	}
	return nil
}

func (x *Element) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Element) GetClassOrInheritanceModification() *ClassOrInheritanceModification {
	if x != nil {
		return x.ClassOrInheritanceModification
	}
	return nil
}

func (x *Element) GetInstance() *ClassDefinition {
	if x != nil {
		return x.Instance
	}
	return nil
}

type EquationSection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Initial       bool                   `protobuf:"varint,1,opt,name=initial,proto3" json:"initial,omitempty"`
	EquationList  []*Equation            `protobuf:"bytes,2,rep,name=equationList,proto3" json:"equationList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquationSection) Reset() {
	*x = EquationSection{}
	mi := &file_compiler_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquationSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquationSection) ProtoMessage() {}

func (x *EquationSection) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquationSection.ProtoReflect.Descriptor instead.
func (*EquationSection) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{16}
}

func (x *EquationSection) GetInitial() bool {
	if x != nil {
		return x.Initial
	}
	return false
}

func (x *EquationSection) GetEquationList() []*Equation {
	if x != nil {
		return x.EquationList
	}
	return nil
}

type AlgorithmSection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Initial       bool                   `protobuf:"varint,1,opt,name=initial,proto3" json:"initial,omitempty"`
	StatementList []string               `protobuf:"bytes,2,rep,name=statementList,proto3" json:"statementList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmSection) Reset() {
	*x = AlgorithmSection{}
	mi := &file_compiler_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmSection) ProtoMessage() {}

func (x *AlgorithmSection) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmSection.ProtoReflect.Descriptor instead.
func (*AlgorithmSection) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{17}
}

func (x *AlgorithmSection) GetInitial() bool {
	if x != nil {
		return x.Initial
	}
	return false
}

func (x *AlgorithmSection) GetStatementList() []string {
	if x != nil {
		return x.StatementList
	}
	return nil
}

type ExternalComposition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LanguageSpecification string                 `protobuf:"bytes,1,opt,name=languageSpecification,proto3" json:"languageSpecification,omitempty"`
	ExternalFunctionCall  *ExternalFunctionCall  `protobuf:"bytes,2,opt,name=externalFunctionCall,proto3" json:"externalFunctionCall,omitempty"`
	Annotation            []*Argument            `protobuf:"bytes,3,rep,name=annotation,proto3" json:"annotation,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ExternalComposition) Reset() {
	*x = ExternalComposition{}
	mi := &file_compiler_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalComposition) ProtoMessage() {}

func (x *ExternalComposition) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalComposition.ProtoReflect.Descriptor instead.
func (*ExternalComposition) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{18}
}

func (x *ExternalComposition) GetLanguageSpecification() string {
	if x != nil {
		return x.LanguageSpecification
	}
	return ""
}

func (x *ExternalComposition) GetExternalFunctionCall() *ExternalFunctionCall {
	if x != nil {
		return x.ExternalFunctionCall
	}
	return nil
}

func (x *ExternalComposition) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type ShortClassSpecifier struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent            string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	BasePrefix        string                 `protobuf:"bytes,4,opt,name=basePrefix,proto3" json:"basePrefix,omitempty"`
	Annotation        []*Argument            `protobuf:"bytes,5,rep,name=annotation,proto3" json:"annotation,omitempty"`
	Specifier         string                 `protobuf:"bytes,6,opt,name=specifier,proto3" json:"specifier,omitempty"`
	ArraySubscript    []string               `protobuf:"bytes,7,rep,name=arraySubscript,proto3" json:"arraySubscript,omitempty"`
	Enumeration       bool                   `protobuf:"varint,8,opt,name=enumeration,proto3" json:"enumeration,omitempty"`
	EnumList          []*EnumerationLiteral  `protobuf:"bytes,9,rep,name=enum_list,json=enumList,proto3" json:"enum_list,omitempty"`
	ClassModification []*Argument            `protobuf:"bytes,10,rep,name=classModification,proto3" json:"classModification,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ShortClassSpecifier) Reset() {
	*x = ShortClassSpecifier{}
	mi := &file_compiler_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortClassSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortClassSpecifier) ProtoMessage() {}

func (x *ShortClassSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortClassSpecifier.ProtoReflect.Descriptor instead.
func (*ShortClassSpecifier) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{19}
}

func (x *ShortClassSpecifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortClassSpecifier) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ShortClassSpecifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShortClassSpecifier) GetBasePrefix() string {
	if x != nil {
		return x.BasePrefix
	}
	return ""
}

func (x *ShortClassSpecifier) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ShortClassSpecifier) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *ShortClassSpecifier) GetArraySubscript() []string {
	if x != nil {
		return x.ArraySubscript
	}
	return nil
}

func (x *ShortClassSpecifier) GetEnumeration() bool {
	if x != nil {
		return x.Enumeration
	}
	return false
}

func (x *ShortClassSpecifier) GetEnumList() []*EnumerationLiteral {
	if x != nil {
		return x.EnumList
	}
	return nil
}

func (x *ShortClassSpecifier) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

type Declaration struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArraySubscript []string               `protobuf:"bytes,2,rep,name=arraySubscript,proto3" json:"arraySubscript,omitempty"`
	Modification   *Modification          `protobuf:"bytes,3,opt,name=modification,proto3" json:"modification,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Declaration) Reset() {
	*x = Declaration{}
	mi := &file_compiler_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Declaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Declaration) ProtoMessage() {}

func (x *Declaration) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Declaration.ProtoReflect.Descriptor instead.
func (*Declaration) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{20}
}

func (x *Declaration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Declaration) GetArraySubscript() []string {
	if x != nil {
		return x.ArraySubscript
	}
	return nil
}

func (x *Declaration) GetModification() *Modification {
	if x != nil {
		return x.Modification
	}
	return nil
}

type ClassModification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArgumentList  []*Argument            `protobuf:"bytes,1,rep,name=argumentList,proto3" json:"argumentList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClassModification) Reset() {
	*x = ClassModification{}
	mi := &file_compiler_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassModification) ProtoMessage() {}

func (x *ClassModification) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassModification.ProtoReflect.Descriptor instead.
func (*ClassModification) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{21}
}

func (x *ClassModification) GetArgumentList() []*Argument {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

type Modification struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	Expression             string                  `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	ClassModification      []*Argument             `protobuf:"bytes,2,rep,name=classModification,proto3" json:"classModification,omitempty"`
	ModificationExpression *ModificationExpression `protobuf:"bytes,3,opt,name=modificationExpression,proto3" json:"modificationExpression,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Modification) Reset() {
	*x = Modification{}
	mi := &file_compiler_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Modification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modification) ProtoMessage() {}

func (x *Modification) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modification.ProtoReflect.Descriptor instead.
func (*Modification) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{22}
}

func (x *Modification) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Modification) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *Modification) GetModificationExpression() *ModificationExpression {
	if x != nil {
		return x.ModificationExpression
	}
	return nil
}

type InheritanceModification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Break           bool                   `protobuf:"varint,2,opt,name=break,proto3" json:"break,omitempty"`
	ConnectEquation *Connection            `protobuf:"bytes,3,opt,name=connectEquation,proto3" json:"connectEquation,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InheritanceModification) Reset() {
	*x = InheritanceModification{}
	mi := &file_compiler_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InheritanceModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InheritanceModification) ProtoMessage() {}

func (x *InheritanceModification) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InheritanceModification.ProtoReflect.Descriptor instead.
func (*InheritanceModification) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{23}
}

func (x *InheritanceModification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InheritanceModification) GetBreak() bool {
	if x != nil {
		return x.Break
	}
	return false
}

func (x *InheritanceModification) GetConnectEquation() *Connection {
	if x != nil {
		return x.ConnectEquation
	}
	return nil
}

type ComponentClause1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        string                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Specifier     string                 `protobuf:"bytes,2,opt,name=specifier,proto3" json:"specifier,omitempty"`
	Declaration   *Declaration           `protobuf:"bytes,3,opt,name=declaration,proto3" json:"declaration,omitempty"`
	Description   *Description           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentClause1) Reset() {
	*x = ComponentClause1{}
	mi := &file_compiler_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentClause1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentClause1) ProtoMessage() {}

func (x *ComponentClause1) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentClause1.ProtoReflect.Descriptor instead.
func (*ComponentClause1) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{24}
}

func (x *ComponentClause1) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ComponentClause1) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *ComponentClause1) GetDeclaration() *Declaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *ComponentClause1) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

type ConstrainingClause struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constrainedby     bool                   `protobuf:"varint,1,opt,name=constrainedby,proto3" json:"constrainedby,omitempty"`
	Specifier         string                 `protobuf:"bytes,2,opt,name=specifier,proto3" json:"specifier,omitempty"`
	ClassModification []*Argument            `protobuf:"bytes,3,rep,name=classModification,proto3" json:"classModification,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConstrainingClause) Reset() {
	*x = ConstrainingClause{}
	mi := &file_compiler_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstrainingClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstrainingClause) ProtoMessage() {}

func (x *ConstrainingClause) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstrainingClause.ProtoReflect.Descriptor instead.
func (*ConstrainingClause) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{25}
}

func (x *ConstrainingClause) GetConstrainedby() bool {
	if x != nil {
		return x.Constrainedby
	}
	return false
}

func (x *ConstrainingClause) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *ConstrainingClause) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

type ClassOrInheritanceModification struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	ArgumentList            []*Argument                `protobuf:"bytes,1,rep,name=argumentList,proto3" json:"argumentList,omitempty"`
	InheritanceModification []*InheritanceModification `protobuf:"bytes,2,rep,name=inheritanceModification,proto3" json:"inheritanceModification,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ClassOrInheritanceModification) Reset() {
	*x = ClassOrInheritanceModification{}
	mi := &file_compiler_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassOrInheritanceModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassOrInheritanceModification) ProtoMessage() {}

func (x *ClassOrInheritanceModification) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassOrInheritanceModification.ProtoReflect.Descriptor instead.
func (*ClassOrInheritanceModification) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{26}
}

func (x *ClassOrInheritanceModification) GetArgumentList() []*Argument {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

func (x *ClassOrInheritanceModification) GetInheritanceModification() []*InheritanceModification {
	if x != nil {
		return x.InheritanceModification
	}
	return nil
}

type Equation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EquationName   string                 `protobuf:"bytes,1,opt,name=equationName,proto3" json:"equationName,omitempty"`
	Connection     *Connection            `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	EquationString string                 `protobuf:"bytes,3,opt,name=equationString,proto3" json:"equationString,omitempty"`
	Description    string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Annotation     []*Argument            `protobuf:"bytes,5,rep,name=annotation,proto3" json:"annotation,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Equation) Reset() {
	*x = Equation{}
	mi := &file_compiler_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Equation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equation) ProtoMessage() {}

func (x *Equation) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equation.ProtoReflect.Descriptor instead.
func (*Equation) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{27}
}

func (x *Equation) GetEquationName() string {
	if x != nil {
		return x.EquationName
	}
	return ""
}

func (x *Equation) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Equation) GetEquationString() string {
	if x != nil {
		return x.EquationString
	}
	return ""
}

func (x *Equation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Equation) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type ExternalFunctionCall struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ComponentReference string                 `protobuf:"bytes,2,opt,name=componentReference,proto3" json:"componentReference,omitempty"`
	ExpressionList     []string               `protobuf:"bytes,3,rep,name=expression_list,json=expressionList,proto3" json:"expression_list,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExternalFunctionCall) Reset() {
	*x = ExternalFunctionCall{}
	mi := &file_compiler_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalFunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalFunctionCall) ProtoMessage() {}

func (x *ExternalFunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalFunctionCall.ProtoReflect.Descriptor instead.
func (*ExternalFunctionCall) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{28}
}

func (x *ExternalFunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalFunctionCall) GetComponentReference() string {
	if x != nil {
		return x.ComponentReference
	}
	return ""
}

func (x *ExternalFunctionCall) GetExpressionList() []string {
	if x != nil {
		return x.ExpressionList
	}
	return nil
}

type ModificationExpression struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expression    string                 `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Break         bool                   `protobuf:"varint,2,opt,name=break,proto3" json:"break,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModificationExpression) Reset() {
	*x = ModificationExpression{}
	mi := &file_compiler_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModificationExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModificationExpression) ProtoMessage() {}

func (x *ModificationExpression) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModificationExpression.ProtoReflect.Descriptor instead.
func (*ModificationExpression) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{29}
}

func (x *ModificationExpression) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ModificationExpression) GetBreak() bool {
	if x != nil {
		return x.Break
	}
	return false
}

type Connection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Left          string                 `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right         string                 `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_compiler_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_compiler_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_compiler_proto_rawDescGZIP(), []int{30}
}

func (x *Connection) GetLeft() string {
	if x != nil {
		return x.Left
	}
	return ""
}

func (x *Connection) GetRight() string {
	if x != nil {
		return x.Right
	}
	return ""
}

var File_compiler_proto protoreflect.FileDescriptor

var file_compiler_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34,
	0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x25, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3c, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xc9,
	0x03, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x11, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x08, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x61, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x20, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0f,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x03, 0x0a, 0x12, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x12, 0x40, 0x0a,
	0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7e, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe0, 0x02, 0x0a, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x61, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x31, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x31, 0x12, 0x43, 0x0a,
	0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x61, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xb2, 0x08, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x12, 0x37, 0x0a, 0x11, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x67, 0x0a, 0x1e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x72, 0x49, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4f, 0x72, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4f, 0x72, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x15, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x29, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x03, 0x0a, 0x13,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x08, 0x65, 0x6e,
	0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7c, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a,
	0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x16, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x17,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x12, 0x35, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x45, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4f, 0x72, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x01,
	0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x83, 0x01, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x22, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x7d,
	0x0a, 0x03, 0x53, 0x4d, 0x43, 0x12, 0x43, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x4c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x2f, 0x53, 0x4d, 0x43, 0x3b, 0x73, 0x6d, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_compiler_proto_rawDescOnce sync.Once
	file_compiler_proto_rawDescData = file_compiler_proto_rawDesc
)

func file_compiler_proto_rawDescGZIP() []byte {
	file_compiler_proto_rawDescOnce.Do(func() {
		file_compiler_proto_rawDescData = protoimpl.X.CompressGZIP(file_compiler_proto_rawDescData)
	})
	return file_compiler_proto_rawDescData
}

var file_compiler_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_compiler_proto_goTypes = []any{
	(*ModelInstanceRequest)(nil),             // 0: ModelInstanceRequest
	(*ModelInstanceResponse)(nil),            // 1: ModelInstanceResponse
	(*LoadFileRequest)(nil),                  // 2: LoadFileRequest
	(*LoadFileResponse)(nil),                 // 3: LoadFileResponse
	(*ClassDefinition)(nil),                  // 4: classDefinition
	(*ClassPrefixes)(nil),                    // 5: classPrefixes
	(*ClassSpecifier)(nil),                   // 6: classSpecifier
	(*Argument)(nil),                         // 7: argument
	(*Composition)(nil),                      // 8: composition
	(*EnumerationLiteral)(nil),               // 9: enumerationLiteral
	(*Description)(nil),                      // 10: description
	(*ElementReplaceable)(nil),               // 11: elementReplaceable
	(*ElementModification)(nil),              // 12: elementModification
	(*ElementRedeclaration)(nil),             // 13: elementRedeclaration
	(*ElementModificationOrReplaceable)(nil), // 14: elementModificationOrReplaceable
	(*Element)(nil),                          // 15: element
	(*EquationSection)(nil),                  // 16: equationSection
	(*AlgorithmSection)(nil),                 // 17: algorithmSection
	(*ExternalComposition)(nil),              // 18: externalComposition
	(*ShortClassSpecifier)(nil),              // 19: shortClassSpecifier
	(*Declaration)(nil),                      // 20: declaration
	(*ClassModification)(nil),                // 21: classModification
	(*Modification)(nil),                     // 22: modification
	(*InheritanceModification)(nil),          // 23: inheritanceModification
	(*ComponentClause1)(nil),                 // 24: componentClause1
	(*ConstrainingClause)(nil),               // 25: constrainingClause
	(*ClassOrInheritanceModification)(nil),   // 26: classOrInheritanceModification
	(*Equation)(nil),                         // 27: equation
	(*ExternalFunctionCall)(nil),             // 28: externalFunctionCall
	(*ModificationExpression)(nil),           // 29: modificationExpression
	(*Connection)(nil),                       // 30: connection
	(*structpb.Struct)(nil),                  // 31: google.protobuf.Struct
}
var file_compiler_proto_depIdxs = []int32{
	5,  // 0: classDefinition.classPrefixes:type_name -> classPrefixes
	6,  // 1: classDefinition.classSpecifier:type_name -> classSpecifier
	7,  // 2: classSpecifier.classModification:type_name -> argument
	8,  // 3: classSpecifier.composition:type_name -> composition
	7,  // 4: classSpecifier.annotation:type_name -> argument
	9,  // 5: classSpecifier.enum_list:type_name -> enumerationLiteral
	31, // 6: argument.data:type_name -> google.protobuf.Struct
	7,  // 7: argument.children:type_name -> argument
	11, // 8: argument.elementReplaceable:type_name -> elementReplaceable
	12, // 9: argument.elementModification:type_name -> elementModification
	13, // 10: argument.elementRedeclaration:type_name -> elementRedeclaration
	14, // 11: argument.elementModificationOrReplaceable:type_name -> elementModificationOrReplaceable
	15, // 12: composition.elementList:type_name -> element
	15, // 13: composition.publicElementList:type_name -> element
	15, // 14: composition.protectedElementList:type_name -> element
	16, // 15: composition.equationSection:type_name -> equationSection
	17, // 16: composition.algorithmSection:type_name -> algorithmSection
	18, // 17: composition.externalComposition:type_name -> externalComposition
	7,  // 18: composition.annotation:type_name -> argument
	10, // 19: enumerationLiteral.description:type_name -> description
	7,  // 20: description.annotation:type_name -> argument
	5,  // 21: elementReplaceable.classPrefixes:type_name -> classPrefixes
	19, // 22: elementReplaceable.shortClassSpecifier:type_name -> shortClassSpecifier
	20, // 23: elementReplaceable.declaration:type_name -> declaration
	10, // 24: elementReplaceable.description:type_name -> description
	21, // 25: elementReplaceable.classModification:type_name -> classModification
	22, // 26: elementModification.modification:type_name -> modification
	5,  // 27: elementRedeclaration.classPrefixes:type_name -> classPrefixes
	19, // 28: elementRedeclaration.shortClassSpecifier:type_name -> shortClassSpecifier
	24, // 29: elementRedeclaration.componentClause1:type_name -> componentClause1
	11, // 30: elementRedeclaration.elementReplaceable:type_name -> elementReplaceable
	12, // 31: elementModificationOrReplaceable.elementModification:type_name -> elementModification
	11, // 32: elementModificationOrReplaceable.elementReplaceable:type_name -> elementReplaceable
	23, // 33: element.inheritanceModification:type_name -> inheritanceModification
	7,  // 34: element.annotation:type_name -> argument
	4,  // 35: element.classDefinition:type_name -> classDefinition
	25, // 36: element.constrainingClause:type_name -> constrainingClause
	7,  // 37: element.classModification:type_name -> argument
	22, // 38: element.modification:type_name -> modification
	26, // 39: element.classOrInheritanceModification:type_name -> classOrInheritanceModification
	4,  // 40: element.instance:type_name -> classDefinition
	27, // 41: equationSection.equationList:type_name -> equation
	28, // 42: externalComposition.externalFunctionCall:type_name -> externalFunctionCall
	7,  // 43: externalComposition.annotation:type_name -> argument
	7,  // 44: shortClassSpecifier.annotation:type_name -> argument
	9,  // 45: shortClassSpecifier.enum_list:type_name -> enumerationLiteral
	7,  // 46: shortClassSpecifier.classModification:type_name -> argument
	22, // 47: declaration.modification:type_name -> modification
	7,  // 48: classModification.argumentList:type_name -> argument
	7,  // 49: modification.classModification:type_name -> argument
	29, // 50: modification.modificationExpression:type_name -> modificationExpression
	30, // 51: inheritanceModification.connectEquation:type_name -> connection
	20, // 52: componentClause1.declaration:type_name -> declaration
	10, // 53: componentClause1.description:type_name -> description
	7,  // 54: constrainingClause.classModification:type_name -> argument
	7,  // 55: classOrInheritanceModification.argumentList:type_name -> argument
	23, // 56: classOrInheritanceModification.inheritanceModification:type_name -> inheritanceModification
	30, // 57: equation.connection:type_name -> connection
	7,  // 58: equation.annotation:type_name -> argument
	0,  // 59: SMC.GetModelInstance:input_type -> ModelInstanceRequest
	2,  // 60: SMC.LoadFile:input_type -> LoadFileRequest
	1,  // 61: SMC.GetModelInstance:output_type -> ModelInstanceResponse
	3,  // 62: SMC.LoadFile:output_type -> LoadFileResponse
	61, // [61:63] is the sub-list for method output_type
	59, // [59:61] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_compiler_proto_init() }
func file_compiler_proto_init() {
	if File_compiler_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compiler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_compiler_proto_goTypes,
		DependencyIndexes: file_compiler_proto_depIdxs,
		MessageInfos:      file_compiler_proto_msgTypes,
	}.Build()
	File_compiler_proto = out.File
	file_compiler_proto_rawDesc = nil
	file_compiler_proto_goTypes = nil
	file_compiler_proto_depIdxs = nil
}
