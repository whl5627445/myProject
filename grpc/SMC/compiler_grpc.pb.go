// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: compiler.proto

package smc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SMC_GetModelInstance_FullMethodName = "/SMC/GetModelInstance"
	SMC_LoadFile_FullMethodName         = "/SMC/LoadFile"
	SMC_GetModelAST_FullMethodName      = "/SMC/GetModelAST"
	SMC_GetModelCode_FullMethodName     = "/SMC/GetModelCode"
)

// SMCClient is the client API for SMC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMCClient interface {
	GetModelInstance(ctx context.Context, in *ModelInstanceRequest, opts ...grpc.CallOption) (*ModelInstanceResponse, error)
	LoadFile(ctx context.Context, in *LoadFileRequest, opts ...grpc.CallOption) (*LoadFileResponse, error)
	GetModelAST(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*ModelASTResponse, error)
	GetModelCode(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*ModelCodeResponse, error)
}

type sMCClient struct {
	cc grpc.ClientConnInterface
}

func NewSMCClient(cc grpc.ClientConnInterface) SMCClient {
	return &sMCClient{cc}
}

func (c *sMCClient) GetModelInstance(ctx context.Context, in *ModelInstanceRequest, opts ...grpc.CallOption) (*ModelInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelInstanceResponse)
	err := c.cc.Invoke(ctx, SMC_GetModelInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMCClient) LoadFile(ctx context.Context, in *LoadFileRequest, opts ...grpc.CallOption) (*LoadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadFileResponse)
	err := c.cc.Invoke(ctx, SMC_LoadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMCClient) GetModelAST(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*ModelASTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelASTResponse)
	err := c.cc.Invoke(ctx, SMC_GetModelAST_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMCClient) GetModelCode(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*ModelCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelCodeResponse)
	err := c.cc.Invoke(ctx, SMC_GetModelCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMCServer is the server API for SMC service.
// All implementations must embed UnimplementedSMCServer
// for forward compatibility.
type SMCServer interface {
	GetModelInstance(context.Context, *ModelInstanceRequest) (*ModelInstanceResponse, error)
	LoadFile(context.Context, *LoadFileRequest) (*LoadFileResponse, error)
	GetModelAST(context.Context, *ModelNameRequest) (*ModelASTResponse, error)
	GetModelCode(context.Context, *ModelNameRequest) (*ModelCodeResponse, error)
	mustEmbedUnimplementedSMCServer()
}

// UnimplementedSMCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSMCServer struct{}

func (UnimplementedSMCServer) GetModelInstance(context.Context, *ModelInstanceRequest) (*ModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInstance not implemented")
}
func (UnimplementedSMCServer) LoadFile(context.Context, *LoadFileRequest) (*LoadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadFile not implemented")
}
func (UnimplementedSMCServer) GetModelAST(context.Context, *ModelNameRequest) (*ModelASTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelAST not implemented")
}
func (UnimplementedSMCServer) GetModelCode(context.Context, *ModelNameRequest) (*ModelCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelCode not implemented")
}
func (UnimplementedSMCServer) mustEmbedUnimplementedSMCServer() {}
func (UnimplementedSMCServer) testEmbeddedByValue()             {}

// UnsafeSMCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMCServer will
// result in compilation errors.
type UnsafeSMCServer interface {
	mustEmbedUnimplementedSMCServer()
}

func RegisterSMCServer(s grpc.ServiceRegistrar, srv SMCServer) {
	// If the following call pancis, it indicates UnimplementedSMCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SMC_ServiceDesc, srv)
}

func _SMC_GetModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).GetModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMC_GetModelInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).GetModelInstance(ctx, req.(*ModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMC_LoadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).LoadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMC_LoadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).LoadFile(ctx, req.(*LoadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMC_GetModelAST_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).GetModelAST(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMC_GetModelAST_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).GetModelAST(ctx, req.(*ModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMC_GetModelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).GetModelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMC_GetModelCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).GetModelCode(ctx, req.(*ModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SMC_ServiceDesc is the grpc.ServiceDesc for SMC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SMC",
	HandlerType: (*SMCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModelInstance",
			Handler:    _SMC_GetModelInstance_Handler,
		},
		{
			MethodName: "LoadFile",
			Handler:    _SMC_LoadFile_Handler,
		},
		{
			MethodName: "GetModelAST",
			Handler:    _SMC_GetModelAST_Handler,
		},
		{
			MethodName: "GetModelCode",
			Handler:    _SMC_GetModelCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compiler.proto",
}
