// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: syntax.proto

package smc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClassDefinition struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PackageName        string                 `protobuf:"bytes,1,opt,name=packageName,proto3" json:"packageName,omitempty"`               // 包名
	ClassSpecifierType string                 `protobuf:"bytes,2,opt,name=classSpecifierType,proto3" json:"classSpecifierType,omitempty"` // 模型说明符类型、 有LongClassSpecifier、ShortClassSpecifier两类
	TypeSpecifier      string                 `protobuf:"bytes,3,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"`           // 表示模型的基本类型
	WithinName         string                 `protobuf:"bytes,4,opt,name=withinName,proto3" json:"withinName,omitempty"`                 // within关键字后标记的所属包名
	Path               string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                             // 模型所在文件
	Encapsulated       bool                   `protobuf:"varint,30,opt,name=encapsulated,proto3" json:"encapsulated,omitempty"`           // encapsulated关键字标记
	Final              bool                   `protobuf:"varint,31,opt,name=final,proto3" json:"final,omitempty"`                         // final关键字标记
	LastUpDateTime     int64                  `protobuf:"varint,40,opt,name=lastUpDateTime,proto3" json:"lastUpDateTime,omitempty"`
	LastSaveTime       int64                  `protobuf:"varint,41,opt,name=lastSaveTime,proto3" json:"lastSaveTime,omitempty"`
	ClassModification  []*Argument            `protobuf:"bytes,60,rep,name=classModification,proto3" json:"classModification,omitempty"` // 模型与组件修饰符列表
	ClassPrefixes      *ClassPrefixes         `protobuf:"bytes,61,opt,name=classPrefixes,proto3" json:"classPrefixes,omitempty"`         // 前缀
	ClassSpecifier     *ClassSpecifier        `protobuf:"bytes,62,opt,name=classSpecifier,proto3" json:"classSpecifier,omitempty"`       // 模型主要部分的数据
	Composition        *Composition           `protobuf:"bytes,63,opt,name=composition,proto3" json:"composition,omitempty"`             // 模型组成，一般是组件、方程、算法、annotation等
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClassDefinition) Reset() {
	*x = ClassDefinition{}
	mi := &file_syntax_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassDefinition) ProtoMessage() {}

func (x *ClassDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassDefinition.ProtoReflect.Descriptor instead.
func (*ClassDefinition) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{0}
}

func (x *ClassDefinition) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ClassDefinition) GetClassSpecifierType() string {
	if x != nil {
		return x.ClassSpecifierType
	}
	return ""
}

func (x *ClassDefinition) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *ClassDefinition) GetWithinName() string {
	if x != nil {
		return x.WithinName
	}
	return ""
}

func (x *ClassDefinition) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ClassDefinition) GetEncapsulated() bool {
	if x != nil {
		return x.Encapsulated
	}
	return false
}

func (x *ClassDefinition) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ClassDefinition) GetLastUpDateTime() int64 {
	if x != nil {
		return x.LastUpDateTime
	}
	return 0
}

func (x *ClassDefinition) GetLastSaveTime() int64 {
	if x != nil {
		return x.LastSaveTime
	}
	return 0
}

func (x *ClassDefinition) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *ClassDefinition) GetClassPrefixes() *ClassPrefixes {
	if x != nil {
		return x.ClassPrefixes
	}
	return nil
}

func (x *ClassDefinition) GetClassSpecifier() *ClassSpecifier {
	if x != nil {
		return x.ClassSpecifier
	}
	return nil
}

func (x *ClassDefinition) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

type ClassPrefixes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefixes      string                 `protobuf:"bytes,1,opt,name=prefixes,proto3" json:"prefixes,omitempty"` // 模型前缀。类似model、package、record等
	Partial       bool                   `protobuf:"varint,30,opt,name=partial,proto3" json:"partial,omitempty"` // partial关键字标记
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClassPrefixes) Reset() {
	*x = ClassPrefixes{}
	mi := &file_syntax_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassPrefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassPrefixes) ProtoMessage() {}

func (x *ClassPrefixes) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassPrefixes.ProtoReflect.Descriptor instead.
func (*ClassPrefixes) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{1}
}

func (x *ClassPrefixes) GetPrefixes() string {
	if x != nil {
		return x.Prefixes
	}
	return ""
}

func (x *ClassPrefixes) GetPartial() bool {
	if x != nil {
		return x.Partial
	}
	return false
}

type ClassSpecifier struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`               // 模型短类名，类似于Modelica.Blocks.Examples.PID_Controller中的PID_Controller名称
	Parent      string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`           // 模型的父节点
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` // 模型的描述
	BasePrefix  string                 `protobuf:"bytes,4,opt,name=basePrefix,proto3" json:"basePrefix,omitempty"`   // 表示output、input等
	// string specifier = 5;// 表示模型的基本类型
	TypeSpecifier      string                `protobuf:"bytes,6,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"`                             // 表示模型的基本类型
	ClassSpecifierType string                `protobuf:"bytes,7,opt,name=classSpecifierType,proto3" json:"classSpecifierType,omitempty"`                   // 模型说明符类型、 有LongClassSpecifier、ShortClassSpecifier两类
	DerClassSpecifier1 string                `protobuf:"bytes,8,opt,name=derClassSpecifier1,proto3" json:"derClassSpecifier1,omitempty"`                   // 子类型
	Extends            bool                  `protobuf:"varint,30,opt,name=extends,proto3" json:"extends,omitempty"`                                       // 标记是否是继承项
	Enumeration        bool                  `protobuf:"varint,31,opt,name=enumeration,proto3" json:"enumeration,omitempty"`                               // 是否是枚举类型
	ClassModification  []*Argument           `protobuf:"bytes,60,rep,name=classModification,proto3" json:"classModification,omitempty"`                    // 修饰符列表
	Annotation         []*Argument           `protobuf:"bytes,61,rep,name=annotation,proto3" json:"annotation,omitempty"`                                  // 注解，包含图形信息、图标信息、坐标以及一些分组等信息
	Composition        *Composition          `protobuf:"bytes,62,opt,name=composition,proto3" json:"composition,omitempty"`                                // 模型组成，一般是组件、方程、算法、annotation等
	ArraySubscripts    []string              `protobuf:"bytes,63,rep,name=array_subscripts,json=arraySubscripts,proto3" json:"array_subscripts,omitempty"` // 数组表示
	EnumList           []*EnumerationLiteral `protobuf:"bytes,64,rep,name=enum_list,json=enumList,proto3" json:"enum_list,omitempty"`                      // 枚举类型的选项列表
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClassSpecifier) Reset() {
	*x = ClassSpecifier{}
	mi := &file_syntax_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassSpecifier) ProtoMessage() {}

func (x *ClassSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassSpecifier.ProtoReflect.Descriptor instead.
func (*ClassSpecifier) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{2}
}

func (x *ClassSpecifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassSpecifier) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ClassSpecifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClassSpecifier) GetBasePrefix() string {
	if x != nil {
		return x.BasePrefix
	}
	return ""
}

func (x *ClassSpecifier) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *ClassSpecifier) GetClassSpecifierType() string {
	if x != nil {
		return x.ClassSpecifierType
	}
	return ""
}

func (x *ClassSpecifier) GetDerClassSpecifier1() string {
	if x != nil {
		return x.DerClassSpecifier1
	}
	return ""
}

func (x *ClassSpecifier) GetExtends() bool {
	if x != nil {
		return x.Extends
	}
	return false
}

func (x *ClassSpecifier) GetEnumeration() bool {
	if x != nil {
		return x.Enumeration
	}
	return false
}

func (x *ClassSpecifier) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *ClassSpecifier) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ClassSpecifier) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *ClassSpecifier) GetArraySubscripts() []string {
	if x != nil {
		return x.ArraySubscripts
	}
	return nil
}

func (x *ClassSpecifier) GetEnumList() []*EnumerationLiteral {
	if x != nil {
		return x.EnumList
	}
	return nil
}

type LongClassSpecifier struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`               // 模型短类名，类似于Modelica.Blocks.Examples.PID_Controller中的PID_Controller名称
	Parent            string                 `protobuf:"bytes,2,opt,name=Parent,proto3" json:"Parent,omitempty"`           // 模型的父节点
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` // 模型的描述
	FullName          string                 `protobuf:"bytes,4,opt,name=fullName,proto3" json:"fullName,omitempty"`       // 模型的全名
	Hash              string                 `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Extends           bool                   `protobuf:"varint,30,opt,name=extends,proto3" json:"extends,omitempty"`                    // 标记是否是继承项
	ClassModification []*Argument            `protobuf:"bytes,60,rep,name=classModification,proto3" json:"classModification,omitempty"` // 修饰符列表
	Composition       *Composition           `protobuf:"bytes,61,opt,name=composition,proto3" json:"composition,omitempty"`             // 模型组成，一般是组件、方程、算法、annotation等
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LongClassSpecifier) Reset() {
	*x = LongClassSpecifier{}
	mi := &file_syntax_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LongClassSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongClassSpecifier) ProtoMessage() {}

func (x *LongClassSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongClassSpecifier.ProtoReflect.Descriptor instead.
func (*LongClassSpecifier) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{3}
}

func (x *LongClassSpecifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LongClassSpecifier) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *LongClassSpecifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LongClassSpecifier) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *LongClassSpecifier) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LongClassSpecifier) GetExtends() bool {
	if x != nil {
		return x.Extends
	}
	return false
}

func (x *LongClassSpecifier) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *LongClassSpecifier) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

type Argument struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                  // 名称
	Binding              string                 `protobuf:"bytes,2,opt,name=binding,proto3" json:"binding,omitempty"`                            // 绑定的数据
	Each                 bool                   `protobuf:"varint,31,opt,name=each,proto3" json:"each,omitempty"`                                // 标记each关键字
	Final                bool                   `protobuf:"varint,32,opt,name=final,proto3" json:"final,omitempty"`                              // 标记final关键字
	Graphics             []*Property            `protobuf:"bytes,60,rep,name=graphics,proto3" json:"graphics,omitempty"`                         // 图形数据
	Children             []*Argument            `protobuf:"bytes,61,rep,name=children,proto3" json:"children,omitempty"`                         // 子节点，结构完全一致
	ElementReplaceable   *ElementReplaceable    `protobuf:"bytes,62,opt,name=elementReplaceable,proto3" json:"elementReplaceable,omitempty"`     // 组件替换
	ElementModification  *ElementModification   `protobuf:"bytes,63,opt,name=elementModification,proto3" json:"elementModification,omitempty"`   // 元素修改项
	ElementRedeclaration *ElementRedeclaration  `protobuf:"bytes,64,opt,name=elementRedeclaration,proto3" json:"elementRedeclaration,omitempty"` // 元素重新声明
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Argument) Reset() {
	*x = Argument{}
	mi := &file_syntax_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{4}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *Argument) GetEach() bool {
	if x != nil {
		return x.Each
	}
	return false
}

func (x *Argument) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *Argument) GetGraphics() []*Property {
	if x != nil {
		return x.Graphics
	}
	return nil
}

func (x *Argument) GetChildren() []*Argument {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Argument) GetElementReplaceable() *ElementReplaceable {
	if x != nil {
		return x.ElementReplaceable
	}
	return nil
}

func (x *Argument) GetElementModification() *ElementModification {
	if x != nil {
		return x.ElementModification
	}
	return nil
}

func (x *Argument) GetElementRedeclaration() *ElementRedeclaration {
	if x != nil {
		return x.ElementRedeclaration
	}
	return nil
}

type Property struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Property      map[string]string      `protobuf:"bytes,1,rep,name=property,proto3" json:"property,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_syntax_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{5}
}

func (x *Property) GetProperty() map[string]string {
	if x != nil {
		return x.Property
	}
	return nil
}

type Composition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ElementList           []*Element             `protobuf:"bytes,1,rep,name=elementList,proto3" json:"elementList,omitempty"`         // 模型组件列表
	EquationSection       []*EquationSection     `protobuf:"bytes,2,rep,name=equationSection,proto3" json:"equationSection,omitempty"` // 方程列表
	Annotation            []*Argument            `protobuf:"bytes,3,rep,name=annotation,proto3" json:"annotation,omitempty"`           // 模型注解，包含图形信息、图标信息、文档以及实验等信息
	AlgorithmSection      []*AlgorithmSection    `protobuf:"bytes,4,rep,name=algorithmSection,proto3" json:"algorithmSection,omitempty"`
	ExternalComposition   []*ExternalComposition `protobuf:"bytes,5,rep,name=externalComposition,proto3" json:"externalComposition,omitempty"`
	LanguageSpecification string                 `protobuf:"bytes,30,opt,name=LanguageSpecification,proto3" json:"LanguageSpecification,omitempty"`
	ExternalFunctionCall  string                 `protobuf:"bytes,31,opt,name=ExternalFunctionCall,proto3" json:"ExternalFunctionCall,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Composition) Reset() {
	*x = Composition{}
	mi := &file_syntax_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Composition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition) ProtoMessage() {}

func (x *Composition) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition.ProtoReflect.Descriptor instead.
func (*Composition) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{6}
}

func (x *Composition) GetElementList() []*Element {
	if x != nil {
		return x.ElementList
	}
	return nil
}

func (x *Composition) GetEquationSection() []*EquationSection {
	if x != nil {
		return x.EquationSection
	}
	return nil
}

func (x *Composition) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *Composition) GetAlgorithmSection() []*AlgorithmSection {
	if x != nil {
		return x.AlgorithmSection
	}
	return nil
}

func (x *Composition) GetExternalComposition() []*ExternalComposition {
	if x != nil {
		return x.ExternalComposition
	}
	return nil
}

func (x *Composition) GetLanguageSpecification() string {
	if x != nil {
		return x.LanguageSpecification
	}
	return ""
}

func (x *Composition) GetExternalFunctionCall() string {
	if x != nil {
		return x.ExternalFunctionCall
	}
	return ""
}

type EnumerationLiteral struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`               // 枚举选项名称
	Description   *Description           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 枚举选项的描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumerationLiteral) Reset() {
	*x = EnumerationLiteral{}
	mi := &file_syntax_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumerationLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumerationLiteral) ProtoMessage() {}

func (x *EnumerationLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumerationLiteral.ProtoReflect.Descriptor instead.
func (*EnumerationLiteral) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{7}
}

func (x *EnumerationLiteral) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumerationLiteral) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

type Description struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"` // 描述
	Annotation    []*Argument            `protobuf:"bytes,2,rep,name=annotation,proto3" json:"annotation,omitempty"`   // 注解
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Description) Reset() {
	*x = Description{}
	mi := &file_syntax_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Description) ProtoMessage() {}

func (x *Description) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Description.ProtoReflect.Descriptor instead.
func (*Description) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{8}
}

func (x *Description) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Description) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type ComponentDeclaration struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ConditionAttribute string                 `protobuf:"bytes,3,opt,name=conditionAttribute,proto3" json:"conditionAttribute,omitempty"`
	Annotation         []*Argument            `protobuf:"bytes,20,rep,name=annotation,proto3" json:"annotation,omitempty"`
	ArraySubscript     []string               `protobuf:"bytes,21,rep,name=arraySubscript,proto3" json:"arraySubscript,omitempty"`
	Modification       *Modification          `protobuf:"bytes,22,opt,name=modification,proto3" json:"modification,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ComponentDeclaration) Reset() {
	*x = ComponentDeclaration{}
	mi := &file_syntax_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentDeclaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentDeclaration) ProtoMessage() {}

func (x *ComponentDeclaration) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentDeclaration.ProtoReflect.Descriptor instead.
func (*ComponentDeclaration) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{9}
}

func (x *ComponentDeclaration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentDeclaration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComponentDeclaration) GetConditionAttribute() string {
	if x != nil {
		return x.ConditionAttribute
	}
	return ""
}

func (x *ComponentDeclaration) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ComponentDeclaration) GetArraySubscript() []string {
	if x != nil {
		return x.ArraySubscript
	}
	return nil
}

func (x *ComponentDeclaration) GetModification() *Modification {
	if x != nil {
		return x.Modification
	}
	return nil
}

type ElementReplaceable struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TypeSpecifier       string                 `protobuf:"bytes,1,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"`              // 说明符
	TypePrefix          string                 `protobuf:"bytes,2,opt,name=typePrefix,proto3" json:"typePrefix,omitempty"`                    // 类型前缀
	Replaceable         bool                   `protobuf:"varint,20,opt,name=replaceable,proto3" json:"replaceable,omitempty"`                // replaceable关键字标记
	Constrainedby       bool                   `protobuf:"varint,21,opt,name=constrainedby,proto3" json:"constrainedby,omitempty"`            // constrainedby关键字标记
	ClassPrefixes       *ClassPrefixes         `protobuf:"bytes,40,opt,name=classPrefixes,proto3" json:"classPrefixes,omitempty"`             // 前缀
	ShortClassSpecifier *ShortClassSpecifier   `protobuf:"bytes,41,opt,name=shortClassSpecifier,proto3" json:"shortClassSpecifier,omitempty"` // 短类数据
	Declaration         *Declaration           `protobuf:"bytes,42,opt,name=declaration,proto3" json:"declaration,omitempty"`                 // 声明
	Description         *Description           `protobuf:"bytes,43,opt,name=description,proto3" json:"description,omitempty"`                 // 描述
	ClassModification   []*Argument            `protobuf:"bytes,44,rep,name=classModification,proto3" json:"classModification,omitempty"`     // 类修改项
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ElementReplaceable) Reset() {
	*x = ElementReplaceable{}
	mi := &file_syntax_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementReplaceable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementReplaceable) ProtoMessage() {}

func (x *ElementReplaceable) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementReplaceable.ProtoReflect.Descriptor instead.
func (*ElementReplaceable) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{10}
}

func (x *ElementReplaceable) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *ElementReplaceable) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

func (x *ElementReplaceable) GetReplaceable() bool {
	if x != nil {
		return x.Replaceable
	}
	return false
}

func (x *ElementReplaceable) GetConstrainedby() bool {
	if x != nil {
		return x.Constrainedby
	}
	return false
}

func (x *ElementReplaceable) GetClassPrefixes() *ClassPrefixes {
	if x != nil {
		return x.ClassPrefixes
	}
	return nil
}

func (x *ElementReplaceable) GetShortClassSpecifier() *ShortClassSpecifier {
	if x != nil {
		return x.ShortClassSpecifier
	}
	return nil
}

func (x *ElementReplaceable) GetDeclaration() *Declaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *ElementReplaceable) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementReplaceable) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

type ElementModification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                  // 名称
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`    // 表示修改项
	Modification  *Modification          `protobuf:"bytes,30,opt,name=modification,proto3" json:"modification,omitempty"` // 描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementModification) Reset() {
	*x = ElementModification{}
	mi := &file_syntax_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementModification) ProtoMessage() {}

func (x *ElementModification) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementModification.ProtoReflect.Descriptor instead.
func (*ElementModification) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{11}
}

func (x *ElementModification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ElementModification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ElementModification) GetModification() *Modification {
	if x != nil {
		return x.Modification
	}
	return nil
}

type ElementRedeclaration struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Redeclare           bool                   `protobuf:"varint,1,opt,name=redeclare,proto3" json:"redeclare,omitempty"`                     // redeclare关键字标记
	Each                bool                   `protobuf:"varint,2,opt,name=each,proto3" json:"each,omitempty"`                               // each关键字标记
	Final               bool                   `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`                             // final关键字标记
	ClassPrefixes       *ClassPrefixes         `protobuf:"bytes,31,opt,name=classPrefixes,proto3" json:"classPrefixes,omitempty"`             // 前缀
	ShortClassSpecifier *ShortClassSpecifier   `protobuf:"bytes,32,opt,name=shortClassSpecifier,proto3" json:"shortClassSpecifier,omitempty"` // 短类数据
	ComponentClause1    *ComponentClause1      `protobuf:"bytes,33,opt,name=componentClause1,proto3" json:"componentClause1,omitempty"`       // 组件子语句，类似表达式
	ElementReplaceable  *ElementReplaceable    `protobuf:"bytes,34,opt,name=elementReplaceable,proto3" json:"elementReplaceable,omitempty"`   // 组件替换
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ElementRedeclaration) Reset() {
	*x = ElementRedeclaration{}
	mi := &file_syntax_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementRedeclaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementRedeclaration) ProtoMessage() {}

func (x *ElementRedeclaration) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementRedeclaration.ProtoReflect.Descriptor instead.
func (*ElementRedeclaration) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{12}
}

func (x *ElementRedeclaration) GetRedeclare() bool {
	if x != nil {
		return x.Redeclare
	}
	return false
}

func (x *ElementRedeclaration) GetEach() bool {
	if x != nil {
		return x.Each
	}
	return false
}

func (x *ElementRedeclaration) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ElementRedeclaration) GetClassPrefixes() *ClassPrefixes {
	if x != nil {
		return x.ClassPrefixes
	}
	return nil
}

func (x *ElementRedeclaration) GetShortClassSpecifier() *ShortClassSpecifier {
	if x != nil {
		return x.ShortClassSpecifier
	}
	return nil
}

func (x *ElementRedeclaration) GetComponentClause1() *ComponentClause1 {
	if x != nil {
		return x.ComponentClause1
	}
	return nil
}

func (x *ElementRedeclaration) GetElementReplaceable() *ElementReplaceable {
	if x != nil {
		return x.ElementReplaceable
	}
	return nil
}

type Element struct {
	state                             protoimpl.MessageState               `protogen:"open.v1"`
	TypeSpecifier                     string                               `protobuf:"bytes,1,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"`                                                   // 表示基本类型
	TypePrefix                        string                               `protobuf:"bytes,2,opt,name=typePrefix,proto3" json:"typePrefix,omitempty"`                                                         // 类型前缀
	Binding                           string                               `protobuf:"bytes,3,opt,name=binding,proto3" json:"binding,omitempty"`                                                               // 绑定的值
	Name                              string                               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                     // 名称
	ImportName                        string                               `protobuf:"bytes,5,opt,name=importName,proto3" json:"importName,omitempty"`                                                         // 导入包的名称
	Parent                            string                               `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`                                                                 // 模型的父节点
	Description                       string                               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                                                       // 描述
	ConditionAttribute                string                               `protobuf:"bytes,8,opt,name=conditionAttribute,proto3" json:"conditionAttribute,omitempty"`                                         // 条件表达式，一般用于表达是否启用
	Import                            bool                                 `protobuf:"varint,30,opt,name=import,proto3" json:"import,omitempty"`                                                               // 标记是否是导入的包
	Extends                           bool                                 `protobuf:"varint,31,opt,name=extends,proto3" json:"extends,omitempty"`                                                             // 标记是否是继承项
	Replaceable                       bool                                 `protobuf:"varint,32,opt,name=replaceable,proto3" json:"replaceable,omitempty"`                                                     // replaceable关键字标记
	Constrainedby                     bool                                 `protobuf:"varint,33,opt,name=constrainedby,proto3" json:"constrainedby,omitempty"`                                                 // constrainedby关键字标记
	Redeclare                         bool                                 `protobuf:"varint,34,opt,name=redeclare,proto3" json:"redeclare,omitempty"`                                                         // redeclare关键字标记
	Final                             bool                                 `protobuf:"varint,35,opt,name=final,proto3" json:"final,omitempty"`                                                                 // final关键字标记
	Inner                             bool                                 `protobuf:"varint,36,opt,name=inner,proto3" json:"inner,omitempty"`                                                                 // inner关键字标记
	Outer                             bool                                 `protobuf:"varint,37,opt,name=outer,proto3" json:"outer,omitempty"`                                                                 // outer关键字标记
	Public                            bool                                 `protobuf:"varint,38,opt,name=public,proto3" json:"public,omitempty"`                                                               // public关键字标记
	Protected                         bool                                 `protobuf:"varint,39,opt,name=protected,proto3" json:"protected,omitempty"`                                                         // protected关键字标记
	ArraySubscripts                   []string                             `protobuf:"bytes,20,rep,name=arraySubscripts,proto3" json:"arraySubscripts,omitempty"`                                              // 数组表示
	Annotation                        []*Argument                          `protobuf:"bytes,21,rep,name=annotation,proto3" json:"annotation,omitempty"`                                                        // 注释信息
	ElementModification               []*Argument                          `protobuf:"bytes,22,rep,name=elementModification,proto3" json:"elementModification,omitempty"`                                      // 修饰符列表
	DeclarationArraySubscripts        []string                             `protobuf:"bytes,23,rep,name=declarationArraySubscripts,json=das,proto3" json:"declarationArraySubscripts,omitempty"`               // declaration的数组表示
	ArgumentOrInheritanceModification []*ArgumentOrInheritanceModification `protobuf:"bytes,24,rep,name=argumentOrInheritanceModification,json=aim,proto3" json:"argumentOrInheritanceModification,omitempty"` // 类或继承项的信息
	ClassDefinition                   *ClassDefinition                     `protobuf:"bytes,40,opt,name=classDefinition,proto3" json:"classDefinition,omitempty"`                                              // 模型中子模型项
	Constraining                      *Constraining                        `protobuf:"bytes,41,opt,name=constraining,proto3" json:"constraining,omitempty"`                                                    // 约束条件
	// modification modification = 42;// 表示修改项
	Instance      *ClassDefinition `protobuf:"bytes,44,opt,name=instance,proto3" json:"instance,omitempty"` // 模型实例
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Element) Reset() {
	*x = Element{}
	mi := &file_syntax_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{13}
}

func (x *Element) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *Element) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

func (x *Element) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Element) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *Element) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Element) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Element) GetConditionAttribute() string {
	if x != nil {
		return x.ConditionAttribute
	}
	return ""
}

func (x *Element) GetImport() bool {
	if x != nil {
		return x.Import
	}
	return false
}

func (x *Element) GetExtends() bool {
	if x != nil {
		return x.Extends
	}
	return false
}

func (x *Element) GetReplaceable() bool {
	if x != nil {
		return x.Replaceable
	}
	return false
}

func (x *Element) GetConstrainedby() bool {
	if x != nil {
		return x.Constrainedby
	}
	return false
}

func (x *Element) GetRedeclare() bool {
	if x != nil {
		return x.Redeclare
	}
	return false
}

func (x *Element) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *Element) GetInner() bool {
	if x != nil {
		return x.Inner
	}
	return false
}

func (x *Element) GetOuter() bool {
	if x != nil {
		return x.Outer
	}
	return false
}

func (x *Element) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Element) GetProtected() bool {
	if x != nil {
		return x.Protected
	}
	return false
}

func (x *Element) GetArraySubscripts() []string {
	if x != nil {
		return x.ArraySubscripts
	}
	return nil
}

func (x *Element) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *Element) GetElementModification() []*Argument {
	if x != nil {
		return x.ElementModification
	}
	return nil
}

func (x *Element) GetDeclarationArraySubscripts() []string {
	if x != nil {
		return x.DeclarationArraySubscripts
	}
	return nil
}

func (x *Element) GetArgumentOrInheritanceModification() []*ArgumentOrInheritanceModification {
	if x != nil {
		return x.ArgumentOrInheritanceModification
	}
	return nil
}

func (x *Element) GetClassDefinition() *ClassDefinition {
	if x != nil {
		return x.ClassDefinition
	}
	return nil
}

func (x *Element) GetConstraining() *Constraining {
	if x != nil {
		return x.Constraining
	}
	return nil
}

func (x *Element) GetInstance() *ClassDefinition {
	if x != nil {
		return x.Instance
	}
	return nil
}

type ArgumentOrInheritanceModification struct {
	state                     protoimpl.MessageState   `protogen:"open.v1"`
	IsArgument                bool                     `protobuf:"varint,1,opt,name=isArgument,proto3" json:"isArgument,omitempty"`
	IsInheritanceModification bool                     `protobuf:"varint,2,opt,name=isInheritanceModification,proto3" json:"isInheritanceModification,omitempty"`
	Argument                  *Argument                `protobuf:"bytes,5,opt,name=argument,proto3" json:"argument,omitempty"`
	InheritanceModification   *InheritanceModification `protobuf:"bytes,6,opt,name=inheritanceModification,json=im,proto3" json:"inheritanceModification,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ArgumentOrInheritanceModification) Reset() {
	*x = ArgumentOrInheritanceModification{}
	mi := &file_syntax_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentOrInheritanceModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentOrInheritanceModification) ProtoMessage() {}

func (x *ArgumentOrInheritanceModification) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentOrInheritanceModification.ProtoReflect.Descriptor instead.
func (*ArgumentOrInheritanceModification) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{14}
}

func (x *ArgumentOrInheritanceModification) GetIsArgument() bool {
	if x != nil {
		return x.IsArgument
	}
	return false
}

func (x *ArgumentOrInheritanceModification) GetIsInheritanceModification() bool {
	if x != nil {
		return x.IsInheritanceModification
	}
	return false
}

func (x *ArgumentOrInheritanceModification) GetArgument() *Argument {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *ArgumentOrInheritanceModification) GetInheritanceModification() *InheritanceModification {
	if x != nil {
		return x.InheritanceModification
	}
	return nil
}

type EquationSection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Initial       bool                   `protobuf:"varint,1,opt,name=initial,proto3" json:"initial,omitempty"`           // initial关键字标记
	EquationList  []*Equation            `protobuf:"bytes,20,rep,name=equationList,proto3" json:"equationList,omitempty"` // 方程列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquationSection) Reset() {
	*x = EquationSection{}
	mi := &file_syntax_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquationSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquationSection) ProtoMessage() {}

func (x *EquationSection) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquationSection.ProtoReflect.Descriptor instead.
func (*EquationSection) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{15}
}

func (x *EquationSection) GetInitial() bool {
	if x != nil {
		return x.Initial
	}
	return false
}

func (x *EquationSection) GetEquationList() []*Equation {
	if x != nil {
		return x.EquationList
	}
	return nil
}

type AlgorithmSection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Initial       bool                   `protobuf:"varint,1,opt,name=initial,proto3" json:"initial,omitempty"`
	StatementList []string               `protobuf:"bytes,20,rep,name=statementList,proto3" json:"statementList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmSection) Reset() {
	*x = AlgorithmSection{}
	mi := &file_syntax_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmSection) ProtoMessage() {}

func (x *AlgorithmSection) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmSection.ProtoReflect.Descriptor instead.
func (*AlgorithmSection) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{16}
}

func (x *AlgorithmSection) GetInitial() bool {
	if x != nil {
		return x.Initial
	}
	return false
}

func (x *AlgorithmSection) GetStatementList() []string {
	if x != nil {
		return x.StatementList
	}
	return nil
}

type ExternalComposition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LanguageSpecification string                 `protobuf:"bytes,1,opt,name=languageSpecification,proto3" json:"languageSpecification,omitempty"`
	Annotation            []*Argument            `protobuf:"bytes,20,rep,name=annotation,proto3" json:"annotation,omitempty"`
	ExternalFunctionCall  *ExternalFunctionCall  `protobuf:"bytes,30,opt,name=externalFunctionCall,proto3" json:"externalFunctionCall,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ExternalComposition) Reset() {
	*x = ExternalComposition{}
	mi := &file_syntax_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalComposition) ProtoMessage() {}

func (x *ExternalComposition) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalComposition.ProtoReflect.Descriptor instead.
func (*ExternalComposition) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{17}
}

func (x *ExternalComposition) GetLanguageSpecification() string {
	if x != nil {
		return x.LanguageSpecification
	}
	return ""
}

func (x *ExternalComposition) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ExternalComposition) GetExternalFunctionCall() *ExternalFunctionCall {
	if x != nil {
		return x.ExternalFunctionCall
	}
	return nil
}

type ShortClassSpecifier struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // 模型短类名，类似于Modelica.Blocks.Examples.PID_Controller中的PID_Controller名称
	Parent            string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`               // 模型的父节点
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // 模型的描述
	BasePrefix        string                 `protobuf:"bytes,4,opt,name=basePrefix,proto3" json:"basePrefix,omitempty"`       // 表示output、input等
	TypeSpecifier     string                 `protobuf:"bytes,5,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"` // 表示模型的基本类型
	FullName          string                 `protobuf:"bytes,6,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Enumeration       bool                   `protobuf:"varint,20,opt,name=enumeration,proto3" json:"enumeration,omitempty"`            // 是否是枚举类型
	ArraySubscript    []string               `protobuf:"bytes,40,rep,name=arraySubscript,proto3" json:"arraySubscript,omitempty"`       // 数组表示
	Annotation        []*Argument            `protobuf:"bytes,41,rep,name=annotation,proto3" json:"annotation,omitempty"`               // 模型注解
	ClassModification []*Argument            `protobuf:"bytes,42,rep,name=classModification,proto3" json:"classModification,omitempty"` // 模型与组件修饰符列表
	EnumList          []*EnumerationLiteral  `protobuf:"bytes,43,rep,name=enum_list,json=enumList,proto3" json:"enum_list,omitempty"`   // 枚举类型的选项列表
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ShortClassSpecifier) Reset() {
	*x = ShortClassSpecifier{}
	mi := &file_syntax_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortClassSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortClassSpecifier) ProtoMessage() {}

func (x *ShortClassSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortClassSpecifier.ProtoReflect.Descriptor instead.
func (*ShortClassSpecifier) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{18}
}

func (x *ShortClassSpecifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortClassSpecifier) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ShortClassSpecifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShortClassSpecifier) GetBasePrefix() string {
	if x != nil {
		return x.BasePrefix
	}
	return ""
}

func (x *ShortClassSpecifier) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *ShortClassSpecifier) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ShortClassSpecifier) GetEnumeration() bool {
	if x != nil {
		return x.Enumeration
	}
	return false
}

func (x *ShortClassSpecifier) GetArraySubscript() []string {
	if x != nil {
		return x.ArraySubscript
	}
	return nil
}

func (x *ShortClassSpecifier) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ShortClassSpecifier) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *ShortClassSpecifier) GetEnumList() []*EnumerationLiteral {
	if x != nil {
		return x.EnumList
	}
	return nil
}

type DerClassSpecifier struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // 模型短类名，类似于Modelica.Blocks.Examples.PID_Controller中的PID_Controller名称
	Parent             string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`               // 模型的父节点
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // 模型的描述
	TypeSpecifier      string                 `protobuf:"bytes,4,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"` // 表示模型的基本类型
	FullName           string                 `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName,omitempty"`           // 全名
	Hash               string                 `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	DerClassSpecifier1 string                 `protobuf:"bytes,7,opt,name=derClassSpecifier1,proto3" json:"derClassSpecifier1,omitempty"` // 子类型
	Annotation         []*Argument            `protobuf:"bytes,20,rep,name=annotation,proto3" json:"annotation,omitempty"`                // 模型注解
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DerClassSpecifier) Reset() {
	*x = DerClassSpecifier{}
	mi := &file_syntax_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerClassSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerClassSpecifier) ProtoMessage() {}

func (x *DerClassSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerClassSpecifier.ProtoReflect.Descriptor instead.
func (*DerClassSpecifier) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{19}
}

func (x *DerClassSpecifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DerClassSpecifier) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DerClassSpecifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DerClassSpecifier) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *DerClassSpecifier) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *DerClassSpecifier) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DerClassSpecifier) GetDerClassSpecifier1() string {
	if x != nil {
		return x.DerClassSpecifier1
	}
	return ""
}

func (x *DerClassSpecifier) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type Declaration struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                     // 名称
	ArraySubscript []string               `protobuf:"bytes,2,rep,name=arraySubscript,proto3" json:"arraySubscript,omitempty"` // 数组表示
	Modification   *Modification          `protobuf:"bytes,10,opt,name=modification,proto3" json:"modification,omitempty"`    // 修改项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Declaration) Reset() {
	*x = Declaration{}
	mi := &file_syntax_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Declaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Declaration) ProtoMessage() {}

func (x *Declaration) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Declaration.ProtoReflect.Descriptor instead.
func (*Declaration) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{20}
}

func (x *Declaration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Declaration) GetArraySubscript() []string {
	if x != nil {
		return x.ArraySubscript
	}
	return nil
}

func (x *Declaration) GetModification() *Modification {
	if x != nil {
		return x.Modification
	}
	return nil
}

type Modification struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	Expression             string                  `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`                          // 表达式
	Start                  bool                    `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`                                   // 如果是初始猜测赋值，类似:=形式， 则标记
	ClassModification      []*Argument             `protobuf:"bytes,20,rep,name=classModification,proto3" json:"classModification,omitempty"`           // 类修改项
	ModificationExpression *ModificationExpression `protobuf:"bytes,30,opt,name=modificationExpression,proto3" json:"modificationExpression,omitempty"` // 修改项表达式
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Modification) Reset() {
	*x = Modification{}
	mi := &file_syntax_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Modification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modification) ProtoMessage() {}

func (x *Modification) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modification.ProtoReflect.Descriptor instead.
func (*Modification) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{21}
}

func (x *Modification) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Modification) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *Modification) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

func (x *Modification) GetModificationExpression() *ModificationExpression {
	if x != nil {
		return x.ModificationExpression
	}
	return nil
}

type InheritanceModification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Break           bool                   `protobuf:"varint,2,opt,name=break,proto3" json:"break,omitempty"`
	ConnectEquation *Connection            `protobuf:"bytes,10,opt,name=connectEquation,proto3" json:"connectEquation,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InheritanceModification) Reset() {
	*x = InheritanceModification{}
	mi := &file_syntax_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InheritanceModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InheritanceModification) ProtoMessage() {}

func (x *InheritanceModification) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InheritanceModification.ProtoReflect.Descriptor instead.
func (*InheritanceModification) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{22}
}

func (x *InheritanceModification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InheritanceModification) GetBreak() bool {
	if x != nil {
		return x.Break
	}
	return false
}

func (x *InheritanceModification) GetConnectEquation() *Connection {
	if x != nil {
		return x.ConnectEquation
	}
	return nil
}

type ComponentClause1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeSpecifier string                 `protobuf:"bytes,1,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"` // 说明符
	TypePrefix    string                 `protobuf:"bytes,2,opt,name=typePrefix,proto3" json:"typePrefix,omitempty"`       // 类型前缀
	Declaration   *Declaration           `protobuf:"bytes,10,opt,name=declaration,proto3" json:"declaration,omitempty"`    // 声明
	Description   *Description           `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`    // 描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentClause1) Reset() {
	*x = ComponentClause1{}
	mi := &file_syntax_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentClause1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentClause1) ProtoMessage() {}

func (x *ComponentClause1) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentClause1.ProtoReflect.Descriptor instead.
func (*ComponentClause1) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{23}
}

func (x *ComponentClause1) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *ComponentClause1) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

func (x *ComponentClause1) GetDeclaration() *Declaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *ComponentClause1) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

type Constraining struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constrainedby     bool                   `protobuf:"varint,1,opt,name=constrainedby,proto3" json:"constrainedby,omitempty"`         // constrainedby关键字标记
	TypeSpecifier     string                 `protobuf:"bytes,2,opt,name=typeSpecifier,proto3" json:"typeSpecifier,omitempty"`          // 表示基本类型
	ClassModification []*Argument            `protobuf:"bytes,10,rep,name=classModification,proto3" json:"classModification,omitempty"` // 类修改项
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Constraining) Reset() {
	*x = Constraining{}
	mi := &file_syntax_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constraining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraining) ProtoMessage() {}

func (x *Constraining) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraining.ProtoReflect.Descriptor instead.
func (*Constraining) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{24}
}

func (x *Constraining) GetConstrainedby() bool {
	if x != nil {
		return x.Constrainedby
	}
	return false
}

func (x *Constraining) GetTypeSpecifier() string {
	if x != nil {
		return x.TypeSpecifier
	}
	return ""
}

func (x *Constraining) GetClassModification() []*Argument {
	if x != nil {
		return x.ClassModification
	}
	return nil
}

type Equation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EquationName   string                 `protobuf:"bytes,1,opt,name=equationName,proto3" json:"equationName,omitempty"`     // 方程名称
	EquationString string                 `protobuf:"bytes,2,opt,name=equationString,proto3" json:"equationString,omitempty"` // 方程源码
	ForIndices     string                 `protobuf:"bytes,3,opt,name=forIndices,proto3" json:"forIndices,omitempty"`         // 循环索引
	Connection     []*Connection          `protobuf:"bytes,20,rep,name=connection,proto3" json:"connection,omitempty"`        // 连接
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Equation) Reset() {
	*x = Equation{}
	mi := &file_syntax_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Equation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equation) ProtoMessage() {}

func (x *Equation) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equation.ProtoReflect.Descriptor instead.
func (*Equation) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{25}
}

func (x *Equation) GetEquationName() string {
	if x != nil {
		return x.EquationName
	}
	return ""
}

func (x *Equation) GetEquationString() string {
	if x != nil {
		return x.EquationString
	}
	return ""
}

func (x *Equation) GetForIndices() string {
	if x != nil {
		return x.ForIndices
	}
	return ""
}

func (x *Equation) GetConnection() []*Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type ExternalFunctionCall struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ComponentReference string                 `protobuf:"bytes,2,opt,name=componentReference,proto3" json:"componentReference,omitempty"`
	ExpressionList     []string               `protobuf:"bytes,10,rep,name=expression_list,json=expressionList,proto3" json:"expression_list,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExternalFunctionCall) Reset() {
	*x = ExternalFunctionCall{}
	mi := &file_syntax_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalFunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalFunctionCall) ProtoMessage() {}

func (x *ExternalFunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalFunctionCall.ProtoReflect.Descriptor instead.
func (*ExternalFunctionCall) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{26}
}

func (x *ExternalFunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalFunctionCall) GetComponentReference() string {
	if x != nil {
		return x.ComponentReference
	}
	return ""
}

func (x *ExternalFunctionCall) GetExpressionList() []string {
	if x != nil {
		return x.ExpressionList
	}
	return nil
}

type ModificationExpression struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expression    string                 `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Break         bool                   `protobuf:"varint,2,opt,name=break,proto3" json:"break,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModificationExpression) Reset() {
	*x = ModificationExpression{}
	mi := &file_syntax_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModificationExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModificationExpression) ProtoMessage() {}

func (x *ModificationExpression) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModificationExpression.ProtoReflect.Descriptor instead.
func (*ModificationExpression) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{27}
}

func (x *ModificationExpression) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ModificationExpression) GetBreak() bool {
	if x != nil {
		return x.Break
	}
	return false
}

type Connection struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Left                string                 `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`                                // 连接起点
	Right               string                 `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`                              // 连接终点
	Description         string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                  // 方程描述
	Annotation          []*Argument            `protobuf:"bytes,10,rep,name=annotation,proto3" json:"annotation,omitempty"`                   // 方程注解
	LeftArraySubscript  []string               `protobuf:"bytes,11,rep,name=leftArraySubscript,proto3" json:"leftArraySubscript,omitempty"`   // 数组表示
	RightArraySubscript []string               `protobuf:"bytes,12,rep,name=rightArraySubscript,proto3" json:"rightArraySubscript,omitempty"` // 数组表示
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_syntax_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_syntax_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_syntax_proto_rawDescGZIP(), []int{28}
}

func (x *Connection) GetLeft() string {
	if x != nil {
		return x.Left
	}
	return ""
}

func (x *Connection) GetRight() string {
	if x != nil {
		return x.Right
	}
	return ""
}

func (x *Connection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Connection) GetAnnotation() []*Argument {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *Connection) GetLeftArraySubscript() []string {
	if x != nil {
		return x.LeftArraySubscript
	}
	return nil
}

func (x *Connection) GetRightArraySubscript() []string {
	if x != nil {
		return x.RightArraySubscript
	}
	return nil
}

var File_syntax_proto protoreflect.FileDescriptor

var file_syntax_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x22, 0xc7, 0x04, 0x0a, 0x0f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d,
	0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6d,
	0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xdd, 0x04, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x40, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x12,
	0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x03, 0x0a, 0x08, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x63, 0x68, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x65, 0x61, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x3d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x63,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x03, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6d, 0x63,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x2e, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x22, 0x63, 0x0a, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x03, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x51, 0x0a,
	0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x63,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x2e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x31, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x31, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x31, 0x12, 0x4e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x85, 0x08, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x62, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x1a, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x73,
	0x12, 0x5d, 0x0a, 0x21, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d,
	0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x69, 0x6d, 0x12,
	0x45, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x21, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x17, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x2e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x6d, 0x22, 0x65, 0x0a,
	0x0f, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x14,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x63,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x14, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x22, 0xc6, 0x03, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x11,
	0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x31, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x11,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x17, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6d,
	0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x39, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x2e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x62, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a,
	0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x22, 0xf0, 0x01,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x6d, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x66, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x53, 0x4d, 0x43, 0x3b, 0x73, 0x6d, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syntax_proto_rawDescOnce sync.Once
	file_syntax_proto_rawDescData = file_syntax_proto_rawDesc
)

func file_syntax_proto_rawDescGZIP() []byte {
	file_syntax_proto_rawDescOnce.Do(func() {
		file_syntax_proto_rawDescData = protoimpl.X.CompressGZIP(file_syntax_proto_rawDescData)
	})
	return file_syntax_proto_rawDescData
}

var file_syntax_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_syntax_proto_goTypes = []any{
	(*ClassDefinition)(nil),                   // 0: smc.syntax.classDefinition
	(*ClassPrefixes)(nil),                     // 1: smc.syntax.classPrefixes
	(*ClassSpecifier)(nil),                    // 2: smc.syntax.classSpecifier
	(*LongClassSpecifier)(nil),                // 3: smc.syntax.longClassSpecifier
	(*Argument)(nil),                          // 4: smc.syntax.argument
	(*Property)(nil),                          // 5: smc.syntax.property
	(*Composition)(nil),                       // 6: smc.syntax.composition
	(*EnumerationLiteral)(nil),                // 7: smc.syntax.enumerationLiteral
	(*Description)(nil),                       // 8: smc.syntax.description
	(*ComponentDeclaration)(nil),              // 9: smc.syntax.componentDeclaration
	(*ElementReplaceable)(nil),                // 10: smc.syntax.elementReplaceable
	(*ElementModification)(nil),               // 11: smc.syntax.elementModification
	(*ElementRedeclaration)(nil),              // 12: smc.syntax.elementRedeclaration
	(*Element)(nil),                           // 13: smc.syntax.element
	(*ArgumentOrInheritanceModification)(nil), // 14: smc.syntax.argumentOrInheritanceModification
	(*EquationSection)(nil),                   // 15: smc.syntax.equationSection
	(*AlgorithmSection)(nil),                  // 16: smc.syntax.algorithmSection
	(*ExternalComposition)(nil),               // 17: smc.syntax.externalComposition
	(*ShortClassSpecifier)(nil),               // 18: smc.syntax.shortClassSpecifier
	(*DerClassSpecifier)(nil),                 // 19: smc.syntax.derClassSpecifier
	(*Declaration)(nil),                       // 20: smc.syntax.declaration
	(*Modification)(nil),                      // 21: smc.syntax.modification
	(*InheritanceModification)(nil),           // 22: smc.syntax.inheritanceModification
	(*ComponentClause1)(nil),                  // 23: smc.syntax.componentClause1
	(*Constraining)(nil),                      // 24: smc.syntax.constraining
	(*Equation)(nil),                          // 25: smc.syntax.equation
	(*ExternalFunctionCall)(nil),              // 26: smc.syntax.externalFunctionCall
	(*ModificationExpression)(nil),            // 27: smc.syntax.modificationExpression
	(*Connection)(nil),                        // 28: smc.syntax.connection
	nil,                                       // 29: smc.syntax.property.PropertyEntry
}
var file_syntax_proto_depIdxs = []int32{
	4,  // 0: smc.syntax.classDefinition.classModification:type_name -> smc.syntax.argument
	1,  // 1: smc.syntax.classDefinition.classPrefixes:type_name -> smc.syntax.classPrefixes
	2,  // 2: smc.syntax.classDefinition.classSpecifier:type_name -> smc.syntax.classSpecifier
	6,  // 3: smc.syntax.classDefinition.composition:type_name -> smc.syntax.composition
	4,  // 4: smc.syntax.classSpecifier.classModification:type_name -> smc.syntax.argument
	4,  // 5: smc.syntax.classSpecifier.annotation:type_name -> smc.syntax.argument
	6,  // 6: smc.syntax.classSpecifier.composition:type_name -> smc.syntax.composition
	7,  // 7: smc.syntax.classSpecifier.enum_list:type_name -> smc.syntax.enumerationLiteral
	4,  // 8: smc.syntax.longClassSpecifier.classModification:type_name -> smc.syntax.argument
	6,  // 9: smc.syntax.longClassSpecifier.composition:type_name -> smc.syntax.composition
	5,  // 10: smc.syntax.argument.graphics:type_name -> smc.syntax.property
	4,  // 11: smc.syntax.argument.children:type_name -> smc.syntax.argument
	10, // 12: smc.syntax.argument.elementReplaceable:type_name -> smc.syntax.elementReplaceable
	11, // 13: smc.syntax.argument.elementModification:type_name -> smc.syntax.elementModification
	12, // 14: smc.syntax.argument.elementRedeclaration:type_name -> smc.syntax.elementRedeclaration
	29, // 15: smc.syntax.property.property:type_name -> smc.syntax.property.PropertyEntry
	13, // 16: smc.syntax.composition.elementList:type_name -> smc.syntax.element
	15, // 17: smc.syntax.composition.equationSection:type_name -> smc.syntax.equationSection
	4,  // 18: smc.syntax.composition.annotation:type_name -> smc.syntax.argument
	16, // 19: smc.syntax.composition.algorithmSection:type_name -> smc.syntax.algorithmSection
	17, // 20: smc.syntax.composition.externalComposition:type_name -> smc.syntax.externalComposition
	8,  // 21: smc.syntax.enumerationLiteral.description:type_name -> smc.syntax.description
	4,  // 22: smc.syntax.description.annotation:type_name -> smc.syntax.argument
	4,  // 23: smc.syntax.componentDeclaration.annotation:type_name -> smc.syntax.argument
	21, // 24: smc.syntax.componentDeclaration.modification:type_name -> smc.syntax.modification
	1,  // 25: smc.syntax.elementReplaceable.classPrefixes:type_name -> smc.syntax.classPrefixes
	18, // 26: smc.syntax.elementReplaceable.shortClassSpecifier:type_name -> smc.syntax.shortClassSpecifier
	20, // 27: smc.syntax.elementReplaceable.declaration:type_name -> smc.syntax.declaration
	8,  // 28: smc.syntax.elementReplaceable.description:type_name -> smc.syntax.description
	4,  // 29: smc.syntax.elementReplaceable.classModification:type_name -> smc.syntax.argument
	21, // 30: smc.syntax.elementModification.modification:type_name -> smc.syntax.modification
	1,  // 31: smc.syntax.elementRedeclaration.classPrefixes:type_name -> smc.syntax.classPrefixes
	18, // 32: smc.syntax.elementRedeclaration.shortClassSpecifier:type_name -> smc.syntax.shortClassSpecifier
	23, // 33: smc.syntax.elementRedeclaration.componentClause1:type_name -> smc.syntax.componentClause1
	10, // 34: smc.syntax.elementRedeclaration.elementReplaceable:type_name -> smc.syntax.elementReplaceable
	4,  // 35: smc.syntax.element.annotation:type_name -> smc.syntax.argument
	4,  // 36: smc.syntax.element.elementModification:type_name -> smc.syntax.argument
	14, // 37: smc.syntax.element.argumentOrInheritanceModification:type_name -> smc.syntax.argumentOrInheritanceModification
	0,  // 38: smc.syntax.element.classDefinition:type_name -> smc.syntax.classDefinition
	24, // 39: smc.syntax.element.constraining:type_name -> smc.syntax.constraining
	0,  // 40: smc.syntax.element.instance:type_name -> smc.syntax.classDefinition
	4,  // 41: smc.syntax.argumentOrInheritanceModification.argument:type_name -> smc.syntax.argument
	22, // 42: smc.syntax.argumentOrInheritanceModification.inheritanceModification:type_name -> smc.syntax.inheritanceModification
	25, // 43: smc.syntax.equationSection.equationList:type_name -> smc.syntax.equation
	4,  // 44: smc.syntax.externalComposition.annotation:type_name -> smc.syntax.argument
	26, // 45: smc.syntax.externalComposition.externalFunctionCall:type_name -> smc.syntax.externalFunctionCall
	4,  // 46: smc.syntax.shortClassSpecifier.annotation:type_name -> smc.syntax.argument
	4,  // 47: smc.syntax.shortClassSpecifier.classModification:type_name -> smc.syntax.argument
	7,  // 48: smc.syntax.shortClassSpecifier.enum_list:type_name -> smc.syntax.enumerationLiteral
	4,  // 49: smc.syntax.derClassSpecifier.annotation:type_name -> smc.syntax.argument
	21, // 50: smc.syntax.declaration.modification:type_name -> smc.syntax.modification
	4,  // 51: smc.syntax.modification.classModification:type_name -> smc.syntax.argument
	27, // 52: smc.syntax.modification.modificationExpression:type_name -> smc.syntax.modificationExpression
	28, // 53: smc.syntax.inheritanceModification.connectEquation:type_name -> smc.syntax.connection
	20, // 54: smc.syntax.componentClause1.declaration:type_name -> smc.syntax.declaration
	8,  // 55: smc.syntax.componentClause1.description:type_name -> smc.syntax.description
	4,  // 56: smc.syntax.constraining.classModification:type_name -> smc.syntax.argument
	28, // 57: smc.syntax.equation.connection:type_name -> smc.syntax.connection
	4,  // 58: smc.syntax.connection.annotation:type_name -> smc.syntax.argument
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_syntax_proto_init() }
func file_syntax_proto_init() {
	if File_syntax_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syntax_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_syntax_proto_goTypes,
		DependencyIndexes: file_syntax_proto_depIdxs,
		MessageInfos:      file_syntax_proto_msgTypes,
	}.Build()
	File_syntax_proto = out.File
	file_syntax_proto_rawDesc = nil
	file_syntax_proto_goTypes = nil
	file_syntax_proto_depIdxs = nil
}
