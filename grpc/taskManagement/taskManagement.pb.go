// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: taskManagement.proto

package TaskManagement

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParamObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`           // 参数名
	Value   string  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`       // 参数值，如果是文件，value是文件id
	IsFile  bool    `protobuf:"varint,4,opt,name=isFile,proto3" json:"isFile,omitempty"`    // 是否是文件, 已废弃，保留是为了兼容，请使用type，type为file时表示文件，
	Type    string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`         // 参数类型
	Mark    string  `protobuf:"bytes,6,opt,name=mark,proto3" json:"mark,omitempty"`         // 参数标记，用作特殊用途，例如标记优化约束条件
	Min     float32 `protobuf:"fixed32,7,opt,name=min,proto3" json:"min,omitempty"`         // 参数最小值， 表示参数的取值范围
	Max     float32 `protobuf:"fixed32,8,opt,name=max,proto3" json:"max,omitempty"`         // 参数最大值， 表示参数的取值范围
	Weights float32 `protobuf:"fixed32,9,opt,name=weights,proto3" json:"weights,omitempty"` // 参数权重系数，用于优化
}

func (x *ParamObj) Reset() {
	*x = ParamObj{}
	mi := &file_taskManagement_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParamObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamObj) ProtoMessage() {}

func (x *ParamObj) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamObj.ProtoReflect.Descriptor instead.
func (*ParamObj) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{0}
}

func (x *ParamObj) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ParamObj) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ParamObj) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *ParamObj) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ParamObj) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *ParamObj) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ParamObj) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ParamObj) GetWeights() float32 {
	if x != nil {
		return x.Weights
	}
	return 0
}

type Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //模型库名
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` //模型库版本
	Path    string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`       //模型库路径
}

func (x *Library) Reset() {
	*x = Library{}
	mi := &file_taskManagement_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{1}
}

func (x *Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Library) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Library) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TaskAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                            // 任务唯一识别id
	UserName          string      `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`                    // 任务提交人
	TaskType          string      `protobuf:"bytes,3,opt,name=taskType,proto3" json:"taskType,omitempty"`                    // 任务类型, FMpy(单FMU仿真)、AMEsim(AMEsim软件仿真)、Reduce(降阶)、OM(omc仿真)、SSP
	Operate           string      `protobuf:"bytes,4,opt,name=operate,proto3" json:"operate,omitempty"`                      // 提交的任务操作类型
	Application       string      `protobuf:"bytes,5,opt,name=application,proto3" json:"application,omitempty"`              // 应用层模块名称 ,机电：SimulationTest，建模：SimulationModeling， 联合仿真：Co-simulation，降阶ReduceComputer,SSP-Simulation
	StopTime          float32     `protobuf:"fixed32,6,opt,name=stopTime,proto3" json:"stopTime,omitempty"`                  // 仿真结束时间
	FileId            string      `protobuf:"bytes,7,opt,name=fileId,proto3" json:"fileId,omitempty"`                        // fmu文件id,或者和nfs中ssp文件路径
	Params            []*ParamObj `protobuf:"bytes,8,rep,name=params,proto3" json:"params,omitempty"`                        // 输入
	ExportVariables   []string    `protobuf:"bytes,9,rep,name=exportVariables,proto3" json:"exportVariables,omitempty"`      // 输出变量的名称列表
	OutputInterval    float32     `protobuf:"fixed32,10,opt,name=outputInterval,proto3" json:"outputInterval,omitempty"`     // 仿真间隔
	Token             string      `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`                         // 下载fmu文件的token
	StartTime         float32     `protobuf:"fixed32,12,opt,name=startTime,proto3" json:"startTime,omitempty"`               // 仿真开始时间
	ResultAddress     string      `protobuf:"bytes,13,opt,name=resultAddress,proto3" json:"resultAddress,omitempty"`         // 结果地址
	Tolerance         string      `protobuf:"bytes,14,opt,name=tolerance,proto3" json:"tolerance,omitempty"`                 // 仿真容差
	NumberOfIntervals string      `protobuf:"bytes,15,opt,name=numberOfIntervals,proto3" json:"numberOfIntervals,omitempty"` // 仿真步数
	Method            string      `protobuf:"bytes,16,opt,name=method,proto3" json:"method,omitempty"`                       // 仿真方法
	LibraryList       []*Library  `protobuf:"bytes,17,rep,name=libraryList,proto3" json:"libraryList,omitempty"`             // 依赖模型库列表
	ModelName         string      `protobuf:"bytes,18,opt,name=modelName,proto3" json:"modelName,omitempty"`                 // 仿真模型名
	PackageId         string      `protobuf:"bytes,19,opt,name=packageId,proto3" json:"packageId,omitempty"`                 // 仿真模型包唯一识别id
}

func (x *TaskAssignmentsRequest) Reset() {
	*x = TaskAssignmentsRequest{}
	mi := &file_taskManagement_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignmentsRequest) ProtoMessage() {}

func (x *TaskAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*TaskAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAssignmentsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetStopTime() float32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *TaskAssignmentsRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetParams() []*ParamObj {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TaskAssignmentsRequest) GetExportVariables() []string {
	if x != nil {
		return x.ExportVariables
	}
	return nil
}

func (x *TaskAssignmentsRequest) GetOutputInterval() float32 {
	if x != nil {
		return x.OutputInterval
	}
	return 0
}

func (x *TaskAssignmentsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TaskAssignmentsRequest) GetResultAddress() string {
	if x != nil {
		return x.ResultAddress
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetTolerance() string {
	if x != nil {
		return x.Tolerance
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetNumberOfIntervals() string {
	if x != nil {
		return x.NumberOfIntervals
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetLibraryList() []*Library {
	if x != nil {
		return x.LibraryList
	}
	return nil
}

func (x *TaskAssignmentsRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TaskAssignmentsRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type TaskAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Result  bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TaskAssignmentsResponse) Reset() {
	*x = TaskAssignmentsResponse{}
	mi := &file_taskManagement_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignmentsResponse) ProtoMessage() {}

func (x *TaskAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*TaskAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{3}
}

func (x *TaskAssignmentsResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskAssignmentsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *TaskAssignmentsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TerminateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TerminateTaskRequest) Reset() {
	*x = TerminateTaskRequest{}
	mi := &file_taskManagement_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateTaskRequest) ProtoMessage() {}

func (x *TerminateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateTaskRequest.ProtoReflect.Descriptor instead.
func (*TerminateTaskRequest) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{4}
}

func (x *TerminateTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type TerminateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Result  bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TerminateTaskResponse) Reset() {
	*x = TerminateTaskResponse{}
	mi := &file_taskManagement_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateTaskResponse) ProtoMessage() {}

func (x *TerminateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateTaskResponse.ProtoReflect.Descriptor instead.
func (*TerminateTaskResponse) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{5}
}

func (x *TerminateTaskResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TerminateTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *TerminateTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReassignTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`         // 任务唯一识别id
	TaskType string  `protobuf:"bytes,3,opt,name=taskType,proto3" json:"taskType,omitempty"` // 任务类型, FMpy(单FMU仿真)、AMEsim(AMEsim软件仿真)
	Cpu      float32 `protobuf:"fixed32,4,opt,name=cpu,proto3" json:"cpu,omitempty"`         // 任务使用的CPU占比， float类型，0-1之间
	Memory   float32 `protobuf:"fixed32,5,opt,name=memory,proto3" json:"memory,omitempty"`   // 任务使用的内存大小, MB大小
	Message  string  `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`   // 调度原因,写明cpu资源不足或内存资源不足
}

func (x *ReassignTasksRequest) Reset() {
	*x = ReassignTasksRequest{}
	mi := &file_taskManagement_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReassignTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassignTasksRequest) ProtoMessage() {}

func (x *ReassignTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassignTasksRequest.ProtoReflect.Descriptor instead.
func (*ReassignTasksRequest) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{6}
}

func (x *ReassignTasksRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReassignTasksRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *ReassignTasksRequest) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ReassignTasksRequest) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ReassignTasksRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReassignTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Result  bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReassignTasksResponse) Reset() {
	*x = ReassignTasksResponse{}
	mi := &file_taskManagement_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReassignTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassignTasksResponse) ProtoMessage() {}

func (x *ReassignTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassignTasksResponse.ProtoReflect.Descriptor instead.
func (*ReassignTasksResponse) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{7}
}

func (x *ReassignTasksResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReassignTasksResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReassignTasksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskSuspendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *TaskSuspendRequest) Reset() {
	*x = TaskSuspendRequest{}
	mi := &file_taskManagement_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSuspendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSuspendRequest) ProtoMessage() {}

func (x *TaskSuspendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSuspendRequest.ProtoReflect.Descriptor instead.
func (*TaskSuspendRequest) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{8}
}

func (x *TaskSuspendRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type TaskSuspendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Result  bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`  // 暂停进程结果
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // 返回执行信息
}

func (x *TaskSuspendResponse) Reset() {
	*x = TaskSuspendResponse{}
	mi := &file_taskManagement_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSuspendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSuspendResponse) ProtoMessage() {}

func (x *TaskSuspendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSuspendResponse.ProtoReflect.Descriptor instead.
func (*TaskSuspendResponse) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{9}
}

func (x *TaskSuspendResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskSuspendResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *TaskSuspendResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"` // 任务id
}

func (x *TaskResumeRequest) Reset() {
	*x = TaskResumeRequest{}
	mi := &file_taskManagement_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResumeRequest) ProtoMessage() {}

func (x *TaskResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResumeRequest.ProtoReflect.Descriptor instead.
func (*TaskResumeRequest) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{10}
}

func (x *TaskResumeRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type TaskResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Result  bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`  // 恢复进程结果
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // 返回执行信息
}

func (x *TaskResumeResponse) Reset() {
	*x = TaskResumeResponse{}
	mi := &file_taskManagement_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResumeResponse) ProtoMessage() {}

func (x *TaskResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResumeResponse.ProtoReflect.Descriptor instead.
func (*TaskResumeResponse) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{11}
}

func (x *TaskResumeResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResumeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *TaskResumeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SetDoStepParameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string      `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Params []*ParamObj `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"` // 需要修改的参数（列表）
}

func (x *SetDoStepParameterRequest) Reset() {
	*x = SetDoStepParameterRequest{}
	mi := &file_taskManagement_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDoStepParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDoStepParameterRequest) ProtoMessage() {}

func (x *SetDoStepParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDoStepParameterRequest.ProtoReflect.Descriptor instead.
func (*SetDoStepParameterRequest) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{12}
}

func (x *SetDoStepParameterRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SetDoStepParameterRequest) GetParams() []*ParamObj {
	if x != nil {
		return x.Params
	}
	return nil
}

type SetDoStepParameterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Result  bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`  // 参数修改结果
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // 返回执行信息
}

func (x *SetDoStepParameterResponse) Reset() {
	*x = SetDoStepParameterResponse{}
	mi := &file_taskManagement_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDoStepParameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDoStepParameterResponse) ProtoMessage() {}

func (x *SetDoStepParameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taskManagement_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDoStepParameterResponse.ProtoReflect.Descriptor instead.
func (*SetDoStepParameterResponse) Descriptor() ([]byte, []int) {
	return file_taskManagement_proto_rawDescGZIP(), []int{13}
}

func (x *SetDoStepParameterResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SetDoStepParameterResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SetDoStepParameterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_taskManagement_proto protoreflect.FileDescriptor

var file_taskManagement_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4f, 0x62, 0x6a, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x07, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x8d, 0x05, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x39, 0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x5d, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c,
	0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a,
	0x11, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x53, 0x65,
	0x74, 0x44, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x66, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xd3, 0x04, 0x0a, 0x0f, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a,
	0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x24, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x24, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x22,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x22, 0x5a, 0x20, 0x2e, 0x2e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taskManagement_proto_rawDescOnce sync.Once
	file_taskManagement_proto_rawDescData = file_taskManagement_proto_rawDesc
)

func file_taskManagement_proto_rawDescGZIP() []byte {
	file_taskManagement_proto_rawDescOnce.Do(func() {
		file_taskManagement_proto_rawDescData = protoimpl.X.CompressGZIP(file_taskManagement_proto_rawDescData)
	})
	return file_taskManagement_proto_rawDescData
}

var file_taskManagement_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_taskManagement_proto_goTypes = []any{
	(*ParamObj)(nil),                   // 0: TaskManagement.paramObj
	(*Library)(nil),                    // 1: TaskManagement.library
	(*TaskAssignmentsRequest)(nil),     // 2: TaskManagement.TaskAssignmentsRequest
	(*TaskAssignmentsResponse)(nil),    // 3: TaskManagement.TaskAssignmentsResponse
	(*TerminateTaskRequest)(nil),       // 4: TaskManagement.TerminateTaskRequest
	(*TerminateTaskResponse)(nil),      // 5: TaskManagement.TerminateTaskResponse
	(*ReassignTasksRequest)(nil),       // 6: TaskManagement.ReassignTasksRequest
	(*ReassignTasksResponse)(nil),      // 7: TaskManagement.ReassignTasksResponse
	(*TaskSuspendRequest)(nil),         // 8: TaskManagement.TaskSuspendRequest
	(*TaskSuspendResponse)(nil),        // 9: TaskManagement.TaskSuspendResponse
	(*TaskResumeRequest)(nil),          // 10: TaskManagement.TaskResumeRequest
	(*TaskResumeResponse)(nil),         // 11: TaskManagement.TaskResumeResponse
	(*SetDoStepParameterRequest)(nil),  // 12: TaskManagement.SetDoStepParameterRequest
	(*SetDoStepParameterResponse)(nil), // 13: TaskManagement.SetDoStepParameterResponse
}
var file_taskManagement_proto_depIdxs = []int32{
	0,  // 0: TaskManagement.TaskAssignmentsRequest.params:type_name -> TaskManagement.paramObj
	1,  // 1: TaskManagement.TaskAssignmentsRequest.libraryList:type_name -> TaskManagement.library
	0,  // 2: TaskManagement.SetDoStepParameterRequest.params:type_name -> TaskManagement.paramObj
	2,  // 3: TaskManagement.TaskAssignments.Assignments:input_type -> TaskManagement.TaskAssignmentsRequest
	4,  // 4: TaskManagement.TaskAssignments.TerminateTask:input_type -> TaskManagement.TerminateTaskRequest
	6,  // 5: TaskManagement.TaskAssignments.ReassignTasks:input_type -> TaskManagement.ReassignTasksRequest
	8,  // 6: TaskManagement.TaskAssignments.TaskSuspend:input_type -> TaskManagement.TaskSuspendRequest
	10, // 7: TaskManagement.TaskAssignments.TaskResume:input_type -> TaskManagement.TaskResumeRequest
	12, // 8: TaskManagement.TaskAssignments.SetDoStepParameter:input_type -> TaskManagement.SetDoStepParameterRequest
	3,  // 9: TaskManagement.TaskAssignments.Assignments:output_type -> TaskManagement.TaskAssignmentsResponse
	5,  // 10: TaskManagement.TaskAssignments.TerminateTask:output_type -> TaskManagement.TerminateTaskResponse
	7,  // 11: TaskManagement.TaskAssignments.ReassignTasks:output_type -> TaskManagement.ReassignTasksResponse
	9,  // 12: TaskManagement.TaskAssignments.TaskSuspend:output_type -> TaskManagement.TaskSuspendResponse
	11, // 13: TaskManagement.TaskAssignments.TaskResume:output_type -> TaskManagement.TaskResumeResponse
	13, // 14: TaskManagement.TaskAssignments.SetDoStepParameter:output_type -> TaskManagement.SetDoStepParameterResponse
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_taskManagement_proto_init() }
func file_taskManagement_proto_init() {
	if File_taskManagement_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taskManagement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taskManagement_proto_goTypes,
		DependencyIndexes: file_taskManagement_proto_depIdxs,
		MessageInfos:      file_taskManagement_proto_msgTypes,
	}.Build()
	File_taskManagement_proto = out.File
	file_taskManagement_proto_rawDesc = nil
	file_taskManagement_proto_goTypes = nil
	file_taskManagement_proto_depIdxs = nil
}
