// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: taskManagement.proto

package TaskManagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskAssignments_Assignments_FullMethodName        = "/TaskManagement.TaskAssignments/Assignments"
	TaskAssignments_TerminateTask_FullMethodName      = "/TaskManagement.TaskAssignments/TerminateTask"
	TaskAssignments_ReassignTasks_FullMethodName      = "/TaskManagement.TaskAssignments/ReassignTasks"
	TaskAssignments_TaskSuspend_FullMethodName        = "/TaskManagement.TaskAssignments/TaskSuspend"
	TaskAssignments_TaskResume_FullMethodName         = "/TaskManagement.TaskAssignments/TaskResume"
	TaskAssignments_SetDoStepParameter_FullMethodName = "/TaskManagement.TaskAssignments/SetDoStepParameter"
)

// TaskAssignmentsClient is the client API for TaskAssignments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskAssignmentsClient interface {
	Assignments(ctx context.Context, in *TaskAssignmentsRequest, opts ...grpc.CallOption) (*TaskAssignmentsResponse, error)
	TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskResponse, error)
	ReassignTasks(ctx context.Context, in *ReassignTasksRequest, opts ...grpc.CallOption) (*ReassignTasksResponse, error)
	TaskSuspend(ctx context.Context, in *TaskSuspendRequest, opts ...grpc.CallOption) (*TaskSuspendResponse, error)
	TaskResume(ctx context.Context, in *TaskResumeRequest, opts ...grpc.CallOption) (*TaskResumeResponse, error)
	SetDoStepParameter(ctx context.Context, in *SetDoStepParameterRequest, opts ...grpc.CallOption) (*SetDoStepParameterResponse, error)
}

type taskAssignmentsClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskAssignmentsClient(cc grpc.ClientConnInterface) TaskAssignmentsClient {
	return &taskAssignmentsClient{cc}
}

func (c *taskAssignmentsClient) Assignments(ctx context.Context, in *TaskAssignmentsRequest, opts ...grpc.CallOption) (*TaskAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAssignmentsResponse)
	err := c.cc.Invoke(ctx, TaskAssignments_Assignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateTaskResponse)
	err := c.cc.Invoke(ctx, TaskAssignments_TerminateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) ReassignTasks(ctx context.Context, in *ReassignTasksRequest, opts ...grpc.CallOption) (*ReassignTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReassignTasksResponse)
	err := c.cc.Invoke(ctx, TaskAssignments_ReassignTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) TaskSuspend(ctx context.Context, in *TaskSuspendRequest, opts ...grpc.CallOption) (*TaskSuspendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSuspendResponse)
	err := c.cc.Invoke(ctx, TaskAssignments_TaskSuspend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) TaskResume(ctx context.Context, in *TaskResumeRequest, opts ...grpc.CallOption) (*TaskResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResumeResponse)
	err := c.cc.Invoke(ctx, TaskAssignments_TaskResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) SetDoStepParameter(ctx context.Context, in *SetDoStepParameterRequest, opts ...grpc.CallOption) (*SetDoStepParameterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDoStepParameterResponse)
	err := c.cc.Invoke(ctx, TaskAssignments_SetDoStepParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskAssignmentsServer is the server API for TaskAssignments service.
// All implementations must embed UnimplementedTaskAssignmentsServer
// for forward compatibility.
type TaskAssignmentsServer interface {
	Assignments(context.Context, *TaskAssignmentsRequest) (*TaskAssignmentsResponse, error)
	TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskResponse, error)
	ReassignTasks(context.Context, *ReassignTasksRequest) (*ReassignTasksResponse, error)
	TaskSuspend(context.Context, *TaskSuspendRequest) (*TaskSuspendResponse, error)
	TaskResume(context.Context, *TaskResumeRequest) (*TaskResumeResponse, error)
	SetDoStepParameter(context.Context, *SetDoStepParameterRequest) (*SetDoStepParameterResponse, error)
	mustEmbedUnimplementedTaskAssignmentsServer()
}

// UnimplementedTaskAssignmentsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskAssignmentsServer struct{}

func (UnimplementedTaskAssignmentsServer) Assignments(context.Context, *TaskAssignmentsRequest) (*TaskAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assignments not implemented")
}
func (UnimplementedTaskAssignmentsServer) TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTask not implemented")
}
func (UnimplementedTaskAssignmentsServer) ReassignTasks(context.Context, *ReassignTasksRequest) (*ReassignTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassignTasks not implemented")
}
func (UnimplementedTaskAssignmentsServer) TaskSuspend(context.Context, *TaskSuspendRequest) (*TaskSuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSuspend not implemented")
}
func (UnimplementedTaskAssignmentsServer) TaskResume(context.Context, *TaskResumeRequest) (*TaskResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskResume not implemented")
}
func (UnimplementedTaskAssignmentsServer) SetDoStepParameter(context.Context, *SetDoStepParameterRequest) (*SetDoStepParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDoStepParameter not implemented")
}
func (UnimplementedTaskAssignmentsServer) mustEmbedUnimplementedTaskAssignmentsServer() {}
func (UnimplementedTaskAssignmentsServer) testEmbeddedByValue()                         {}

// UnsafeTaskAssignmentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskAssignmentsServer will
// result in compilation errors.
type UnsafeTaskAssignmentsServer interface {
	mustEmbedUnimplementedTaskAssignmentsServer()
}

func RegisterTaskAssignmentsServer(s grpc.ServiceRegistrar, srv TaskAssignmentsServer) {
	// If the following call pancis, it indicates UnimplementedTaskAssignmentsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskAssignments_ServiceDesc, srv)
}

func _TaskAssignments_Assignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).Assignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskAssignments_Assignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).Assignments(ctx, req.(*TaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_TerminateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).TerminateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskAssignments_TerminateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).TerminateTask(ctx, req.(*TerminateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_ReassignTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReassignTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).ReassignTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskAssignments_ReassignTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).ReassignTasks(ctx, req.(*ReassignTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_TaskSuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).TaskSuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskAssignments_TaskSuspend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).TaskSuspend(ctx, req.(*TaskSuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_TaskResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).TaskResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskAssignments_TaskResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).TaskResume(ctx, req.(*TaskResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_SetDoStepParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDoStepParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).SetDoStepParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskAssignments_SetDoStepParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).SetDoStepParameter(ctx, req.(*SetDoStepParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskAssignments_ServiceDesc is the grpc.ServiceDesc for TaskAssignments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskAssignments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskManagement.TaskAssignments",
	HandlerType: (*TaskAssignmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assignments",
			Handler:    _TaskAssignments_Assignments_Handler,
		},
		{
			MethodName: "TerminateTask",
			Handler:    _TaskAssignments_TerminateTask_Handler,
		},
		{
			MethodName: "ReassignTasks",
			Handler:    _TaskAssignments_ReassignTasks_Handler,
		},
		{
			MethodName: "TaskSuspend",
			Handler:    _TaskAssignments_TaskSuspend_Handler,
		},
		{
			MethodName: "TaskResume",
			Handler:    _TaskAssignments_TaskResume_Handler,
		},
		{
			MethodName: "SetDoStepParameter",
			Handler:    _TaskAssignments_SetDoStepParameter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskManagement.proto",
}
