// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: taskManagement.proto

package taskManagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskAssignmentsClient is the client API for TaskAssignments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskAssignmentsClient interface {
	Assignments(ctx context.Context, in *TaskAssignmentsRequest, opts ...grpc.CallOption) (*TaskAssignmentsResponse, error)
	TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskResponse, error)
	ReassignTasks(ctx context.Context, in *ReassignTasksRequest, opts ...grpc.CallOption) (*ReassignTasksResponse, error)
}

type taskAssignmentsClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskAssignmentsClient(cc grpc.ClientConnInterface) TaskAssignmentsClient {
	return &taskAssignmentsClient{cc}
}

func (c *taskAssignmentsClient) Assignments(ctx context.Context, in *TaskAssignmentsRequest, opts ...grpc.CallOption) (*TaskAssignmentsResponse, error) {
	out := new(TaskAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/TaskManagement.TaskAssignments/Assignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskResponse, error) {
	out := new(TerminateTaskResponse)
	err := c.cc.Invoke(ctx, "/TaskManagement.TaskAssignments/TerminateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentsClient) ReassignTasks(ctx context.Context, in *ReassignTasksRequest, opts ...grpc.CallOption) (*ReassignTasksResponse, error) {
	out := new(ReassignTasksResponse)
	err := c.cc.Invoke(ctx, "/TaskManagement.TaskAssignments/ReassignTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskAssignmentsServer is the server API for TaskAssignments service.
// All implementations must embed UnimplementedTaskAssignmentsServer
// for forward compatibility
type TaskAssignmentsServer interface {
	Assignments(context.Context, *TaskAssignmentsRequest) (*TaskAssignmentsResponse, error)
	TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskResponse, error)
	ReassignTasks(context.Context, *ReassignTasksRequest) (*ReassignTasksResponse, error)
	mustEmbedUnimplementedTaskAssignmentsServer()
}

// UnimplementedTaskAssignmentsServer must be embedded to have forward compatible implementations.
type UnimplementedTaskAssignmentsServer struct {
}

func (UnimplementedTaskAssignmentsServer) Assignments(context.Context, *TaskAssignmentsRequest) (*TaskAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assignments not implemented")
}
func (UnimplementedTaskAssignmentsServer) TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTask not implemented")
}
func (UnimplementedTaskAssignmentsServer) ReassignTasks(context.Context, *ReassignTasksRequest) (*ReassignTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassignTasks not implemented")
}
func (UnimplementedTaskAssignmentsServer) mustEmbedUnimplementedTaskAssignmentsServer() {}

// UnsafeTaskAssignmentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskAssignmentsServer will
// result in compilation errors.
type UnsafeTaskAssignmentsServer interface {
	mustEmbedUnimplementedTaskAssignmentsServer()
}

func RegisterTaskAssignmentsServer(s grpc.ServiceRegistrar, srv TaskAssignmentsServer) {
	s.RegisterService(&TaskAssignments_ServiceDesc, srv)
}

func _TaskAssignments_Assignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).Assignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManagement.TaskAssignments/Assignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).Assignments(ctx, req.(*TaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_TerminateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).TerminateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManagement.TaskAssignments/TerminateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).TerminateTask(ctx, req.(*TerminateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignments_ReassignTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReassignTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentsServer).ReassignTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManagement.TaskAssignments/ReassignTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentsServer).ReassignTasks(ctx, req.(*ReassignTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskAssignments_ServiceDesc is the grpc.ServiceDesc for TaskAssignments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskAssignments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskManagement.TaskAssignments",
	HandlerType: (*TaskAssignmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assignments",
			Handler:    _TaskAssignments_Assignments_Handler,
		},
		{
			MethodName: "TerminateTask",
			Handler:    _TaskAssignments_TerminateTask_Handler,
		},
		{
			MethodName: "ReassignTasks",
			Handler:    _TaskAssignments_ReassignTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskManagement.proto",
}
